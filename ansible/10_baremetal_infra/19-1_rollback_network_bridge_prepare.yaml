---
# 19-1_rollback_network_bridge_prepare.yaml - Prepare rollback of network bridge configuration
#
# Purpose:
#   Prepares for removing the network bridge (br0) by creating restoration config without applying it.
#
# Run with: 
#   ansible-playbook -i inventory/inventory.yaml ansible/10_baremetal_infra/19-1_rollback_network_bridge_prepare.yaml
#   Or with helper script:
#   ./scripts/run_ansible.sh ansible/10_baremetal_infra/19-1_rollback_network_bridge_prepare.yaml

- name: Prepare Network Bridge Rollback
  hosts: baremetal
  gather_facts: true
  become: true
  vars:
    network_bridge_name: "{{ network_bridge_name | default('br0') }}"
    ansible_become_pass: "{{ lookup('env', 'ANSIBLE_SUDO_PASS') }}"
    
  tasks:
    - name: Display warning message
      ansible.builtin.debug:
        msg: >-
          
          ═════════════════════════════════════════════════════════
          ⚠️  WARNING: Preparing to Remove Network Bridge ({{ inventory_hostname }})
          ═════════════════════════════════════════════════════════
          
          This playbook will prepare for removing the network bridge ({{ network_bridge_name }})
          by creating a restoration configuration.
          
          NOTE: This playbook only performs preparation steps and will NOT
          disrupt connectivity. The actual network change will happen in
          the next playbook (19-2_rollback_network_bridge_apply.yaml).
          
          ═════════════════════════════════════════════════════════
    
    - name: Determine primary network interface
      ansible.builtin.shell: |
        # First try from route info
        PRIMARY_IFACE=$(ip route get 8.8.8.8 2>/dev/null | grep -oP 'dev \K\S+' | head -1)
        
        # Fallback to looking at all interfaces
        if [ -z "$PRIMARY_IFACE" ]; then
          PRIMARY_IFACE=$(ip -o link show | grep -v lo | grep -v {{ network_bridge_name }} | grep -v veth | grep -v docker | head -1 | awk -F': ' '{print $2}')
        fi
        
        echo "$PRIMARY_IFACE"
      register: primary_interface_result
      changed_when: false
      
    - name: Set primary interface fact
      ansible.builtin.set_fact:
        primary_interface: "{{ primary_interface_result.stdout }}"
      
    - name: Verify primary interface was determined
      ansible.builtin.assert:
        that:
          - primary_interface != ""
        fail_msg: |
          ERROR: Could not determine primary network interface
          
          DETAILS:
          - Unable to identify the physical network interface
          - This is required to restore proper connectivity
          
          REQUIRED ACTION:
          - Run the playbook with a specific interface:
            ansible-playbook -i inventory/inventory.yaml ansible/10_baremetal_infra/19-1_rollback_network_bridge_prepare.yaml -e "primary_interface=eth0"

    - name: Check if netplan directory exists
      ansible.builtin.stat:
        path: /etc/netplan
      register: netplan_dir
      
    - name: Check for Thinkube netplan configuration
      ansible.builtin.stat:
        path: /etc/netplan/01-thinkube-config.yaml
      register: thinkube_netplan
      when: netplan_dir.stat.exists
    
    # Critical: Create a backup of the current network configuration in case something goes wrong
    - name: Backup current network configuration state to /tmp
      ansible.builtin.shell: |
        ip a > /tmp/network_before_rollback.txt
        ip r > /tmp/routes_before_rollback.txt
        if [ -d /etc/netplan ]; then
          mkdir -p /tmp/netplan_backup_{{ ansible_date_time.epoch }}
          cp -a /etc/netplan/* /tmp/netplan_backup_{{ ansible_date_time.epoch }}/
        fi
      changed_when: false
      
    - name: Display netplan backup location
      ansible.builtin.debug:
        msg: "Network configuration backed up to /tmp/netplan_backup_{{ ansible_date_time.epoch }}/"
      when: netplan_dir.stat.exists
    
    - name: Find backup netplan files
      ansible.builtin.find:
        paths: /etc/netplan
        patterns: "*.bak"
      register: backup_netplan_files
      when: netplan_dir.stat.exists
      
    - name: Check for original netplan files
      ansible.builtin.shell: |
        find /etc/netplan -name "*.yaml.bak" | grep -v "01-thinkube-config" || echo ""
      register: original_netplan_files
      changed_when: false
      when: netplan_dir.stat.exists
    
    - name: Check existing netplan configuration files
      ansible.builtin.find:
        paths: /etc/netplan
        patterns: "*.yaml"
        excludes: "01-thinkube-config.yaml"
      register: other_netplan_files
      when: netplan_dir.stat.exists
    
    - name: Create simple netplan configuration if no other configs exist
      ansible.builtin.template:
        src: simple-netplan.yaml.j2
        dest: /etc/netplan/00-thinkube-restore.yaml.prepared
        mode: '0644'
      when: >
        netplan_dir.stat.exists and 
        thinkube_netplan.stat.exists|default(false) and 
        (other_netplan_files.files|default([])|length == 0) and
        (original_netplan_files.stdout|default("") == "")
      
    - name: Display completion message
      ansible.builtin.debug:
        msg: >-
          
          ═════════════════════════════════════════════════════════
          ✓ Network Bridge Rollback Preparation Complete ({{ inventory_hostname }})
          ═════════════════════════════════════════════════════════
          
          DETAILS OF PREPARATION:
          {% if thinkube_netplan.stat.exists|default(false) %}
            ✓ Found existing bridge netplan configuration to remove
          {% endif %}
          {% if original_netplan_files.stdout|default("") != "" %}
            ✓ Found original netplan configurations to restore
          {% elif other_netplan_files.files|default([])|length > 0 %}
            ✓ Found other netplan configurations to use
          {% else %}
            ✓ Created new netplan configuration for direct interface
          {% endif %}
            ✓ Network configuration backed up to /tmp/netplan_backup_{{ ansible_date_time.epoch }}/
            
          NEXT STEPS:
            Now you can proceed with applying the network changes by running:
            ./scripts/run_ansible.sh ansible/10_baremetal_infra/19-2_rollback_network_bridge_apply.yaml
            
            WARNING: This will likely disconnect your SSH session if you're
            connected through the bridge interface!
          
          ═════════════════════════════════════════════════════════