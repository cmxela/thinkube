---
# 20-1_configure_network_bridge_prepare.yaml - Prepare network bridge configuration
#
# Purpose:
#   Prepares for setting up a network bridge (br0) by installing packages
#   and creating configuration without applying it.
#
# Run with: 
#   ansible-playbook -i inventory/inventory.yaml ansible/10_baremetal_infra/20-1_configure_network_bridge_prepare.yaml
#   Or with helper script:
#   ./scripts/run_ansible.sh ansible/10_baremetal_infra/20-1_configure_network_bridge_prepare.yaml

- name: Prepare Network Bridge Configuration
  hosts: baremetal
  become: true
  gather_facts: true
  vars:
    network_bridge_name: "{{ network_bridge_name | default('br0') }}"
    ansible_become_pass: "{{ lookup('env', 'ANSIBLE_SUDO_PASS') }}"

  tasks:
    - name: Display preparation message
      ansible.builtin.debug:
        msg: >-
          
          ═════════════════════════════════════════════════════════
          🔧 Preparing Network Bridge Configuration ({{ inventory_hostname }})
          ═════════════════════════════════════════════════════════
          
          This playbook will prepare for creating a network bridge ({{ network_bridge_name }})
          by installing packages and creating configuration.
          
          NOTE: This playbook only performs preparation steps and will NOT
          disrupt connectivity. The actual network change will happen in
          the next playbook (20-2_configure_network_bridge_apply.yaml).
          
          ═════════════════════════════════════════════════════════

    - name: Verify network gateway is defined in inventory
      ansible.builtin.assert:
        that:
          - network_gateway is defined
          - ansible_host is defined
        fail_msg: |
          ERROR: Missing Required Variables
          
          DETAILS:
          - The following variables must be defined in inventory:
            - network_gateway: {% if network_gateway is defined %}✓{% else %}✗ missing{% endif %}
            - ansible_host: {% if ansible_host is defined %}✓{% else %}✗ missing{% endif %}
          
          REQUIRED ACTION:
          - Add missing variables to your inventory file at inventory/inventory.yaml
          - Or define them in inventory/group_vars/all.yml

    - name: Install bridge-utils and related packages
      ansible.builtin.apt:
        name:
          - bridge-utils
          - ifupdown
        state: present
        update_cache: yes

    - name: Get route info to detect primary interface
      ansible.builtin.shell: |
        ip route get 8.8.8.8 2>/dev/null | grep -oP 'dev \K\S+' | head -1
      register: route_info
      changed_when: false
      
    - name: Get primary network interface
      ansible.builtin.set_fact:
        primary_interface: "{{ route_info.stdout }}"
      when: route_info.stdout != ''
      
    - name: Fallback to default interface if route method fails
      ansible.builtin.set_fact:
        primary_interface: "{{ ansible_interfaces | select('match', '^(ens|eth|enp)') | list | first }}"
      when: route_info.stdout == ''
      
    - name: Show detected primary interface
      ansible.builtin.debug:
        msg: "Detected primary interface: {{ primary_interface }}"

    - name: Check for existing netplan configuration files
      ansible.builtin.find:
        paths: /etc/netplan
        patterns: "*.yaml"
      register: netplan_files
      
    - name: Backup existing netplan configuration files
      ansible.builtin.copy:
        src: "{{ item.path }}"
        dest: "{{ item.path }}.bak"
        remote_src: yes
      loop: "{{ netplan_files.files }}"
      when: netplan_files.files | length > 0

    - name: Create br0 bridge netplan configuration
      ansible.builtin.template:
        src: bridge-netplan.yaml.j2
        dest: "/etc/netplan/01-thinkube-config.yaml.prepared"
        mode: '0644'
        backup: yes

    # Critical: Create a backup of the current network configuration in case something goes wrong
    - name: Backup current network configuration state to /tmp
      ansible.builtin.shell: |
        ip a > /tmp/network_before_bridge.txt
        ip r > /tmp/routes_before_bridge.txt
        # Create a timestamped backup of netplan
        mkdir -p /tmp/netplan_backup_{{ ansible_date_time.epoch }}
        cp -a /etc/netplan/* /tmp/netplan_backup_{{ ansible_date_time.epoch }}/
      changed_when: false
      
    - name: Display preparation completion message
      ansible.builtin.debug:
        msg: >-
          
          ═════════════════════════════════════════════════════════
          ✓ Network Bridge Preparation Complete ({{ inventory_hostname }})
          ═════════════════════════════════════════════════════════
          
          DETAILS OF PREPARATION:
            ✓ Bridge-utils and ifupdown packages installed
            ✓ Primary interface detected: {{ primary_interface }}
            ✓ Network configuration backed up to /tmp/netplan_backup_{{ ansible_date_time.epoch }}/
            ✓ Bridge netplan configuration prepared (not yet applied)
            
          NEXT STEPS:
            Now you can proceed with applying the network changes by running:
            ./scripts/run_ansible.sh ansible/10_baremetal_infra/20-2_configure_network_bridge_apply.yaml
            
            WARNING: This will likely disconnect your SSH session temporarily!
          
          ═════════════════════════════════════════════════════════