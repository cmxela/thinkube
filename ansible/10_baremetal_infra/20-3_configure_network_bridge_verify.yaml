---
# 20-3_configure_network_bridge_verify.yaml - Verify network bridge configuration
#
# Purpose:
#   Verifies network bridge configuration and connectivity after applying changes.
#   Run this after reconnecting to the server following bridge creation.
#
# Run with: 
#   ansible-playbook -i inventory/inventory.yaml ansible/10_baremetal_infra/20-3_configure_network_bridge_verify.yaml
#   Or with helper script:
#   ./scripts/run_ansible.sh ansible/10_baremetal_infra/20-3_configure_network_bridge_verify.yaml

- name: Verify Network Bridge Configuration
  hosts: baremetal
  become: true
  gather_facts: true
  vars:
    network_bridge_name: "{{ network_bridge_name | default('br0') }}"
    ansible_become_pass: "{{ lookup('env', 'ANSIBLE_SUDO_PASS') }}"

  tasks:
    - name: Display verification message
      ansible.builtin.debug:
        msg: >-
          
          ═════════════════════════════════════════════════════════
          🔍 Verifying Network Bridge Configuration ({{ inventory_hostname }})
          ═════════════════════════════════════════════════════════
          
          Verifying that network bridge was successfully created and
          connectivity is working properly.
          
          ═════════════════════════════════════════════════════════
    
    # Wait for network to stabilize
    - name: Wait for network to stabilize
      ansible.builtin.wait_for_connection:
        timeout: 60
        delay: 5
      
    # Verify the bridge is up and running
    - name: Check bridge interface status
      ansible.builtin.shell: ip link show {{ network_bridge_name }} 2>/dev/null || echo "NOT_FOUND"
      register: bridge_status
      changed_when: false
      
    - name: Verify bridge exists
      ansible.builtin.assert:
        that:
          - bridge_status.stdout != "NOT_FOUND"
        fail_msg: |
          ERROR: Bridge Interface Not Found
          
          DETAILS:
          - Bridge interface {{ network_bridge_name }} not found
          - Network bridge creation appears to have failed
          
          REQUIRED ACTION:
          - Check netplan configuration in /etc/netplan/
          - Try applying netplan changes again:
            sudo netplan apply
      
    - name: Display bridge status
      ansible.builtin.debug:
        msg: "{{ bridge_status.stdout_lines|default(['Bridge exists']) }}"
      
    - name: Get updated IP address information
      ansible.builtin.shell: ip a show dev {{ network_bridge_name }}
      register: bridge_ip
      changed_when: false
      
    - name: Display bridge IP information
      ansible.builtin.debug:
        msg: "{{ bridge_ip.stdout_lines }}"
        
    - name: Verify bridge has the correct IP address
      ansible.builtin.shell: |
        ip addr show {{ network_bridge_name }} | grep -oP 'inet \K[0-9.]+' || echo "NO_IP"
      register: bridge_ip_check
      changed_when: false
      
    - name: Verify correct IP
      ansible.builtin.assert:
        that:
          - bridge_ip_check.stdout == ansible_host
        fail_msg: |
          ERROR: Bridge IP Mismatch
          
          DETAILS:
          - Expected IP: {{ ansible_host }}
          - Actual IP: {{ bridge_ip_check.stdout }}
          
          REQUIRED ACTION:
          - Check netplan configuration in /etc/netplan/
          - Verify inventory variables are correct
    
    - name: Get primary interface attached to bridge
      ansible.builtin.shell: |
        ip route get 8.8.8.8 2>/dev/null | grep -oP 'dev \K\S+' | head -1
      register: route_info
      changed_when: false
      
    - name: Set primary interface fact
      ansible.builtin.set_fact:
        primary_interface: "{{ route_info.stdout }}"
      when: route_info.stdout != ''
      
    - name: Verify connectivity through bridge
      ansible.builtin.shell: ping -c 3 8.8.8.8
      register: ping_result
      changed_when: false
      retries: 3
      delay: 10
      until: ping_result.rc == 0
      
    - name: Display connectivity check result
      ansible.builtin.debug:
        msg: "✅ Network connectivity through bridge is working properly (via {{ network_bridge_name }})"
        
    # Verify bridge configuration in netplan
    - name: Check for bridge netplan configuration
      ansible.builtin.stat:
        path: /etc/netplan/01-thinkube-config.yaml
      register: netplan_config
      
    - name: Verify netplan configuration exists
      ansible.builtin.assert:
        that:
          - netplan_config.stat.exists
        fail_msg: |
          ERROR: Bridge Netplan Configuration Not Found
          
          DETAILS:
          - Bridge netplan configuration file not found at /etc/netplan/01-thinkube-config.yaml
          - This file is required for persistent bridge configuration
          
          REQUIRED ACTION:
          - Check for the file in /tmp/netplan_backup_*
          - Recreate the configuration if needed
    
    # Check for physical interface attachment to bridge
    - name: Check bridge attachment
      ansible.builtin.shell: |
        bridge link show | grep "{{ primary_interface }}" || echo "NOT_ATTACHED"
      register: bridge_attachment
      changed_when: false
      when: primary_interface is defined
      
    - name: Verify physical interface is attached to bridge
      ansible.builtin.debug:
        msg: >-
          Physical interface attachment: {% if bridge_attachment.stdout != "NOT_ATTACHED" %}✅ Attached{% else %}⚠️ Not attached{% endif %}
      when: primary_interface is defined
        
    - name: Notify about desktop networking display
      ansible.builtin.debug:
        msg: >-
          
          ═════════════════════════════════════════════════════════════════════════
          NOTE: On desktop systems ({{ inventory_hostname }})
          ═════════════════════════════════════════════════════════════════════════
          
          The ethernet connection will no longer appear in the Gnome network 
          settings GUI after being moved to the bridge.
          
          This is NORMAL BEHAVIOR.
          
          The network is still fully functional, but is now managed by 
          systemd-networkd rather than NetworkManager.
          ═════════════════════════════════════════════════════════════════════════
      when: server_type is defined and server_type == 'desktop'
        
    - name: Display completion message
      ansible.builtin.debug:
        msg: >-
          
          ═════════════════════════════════════════════════════════
          ✓ Network Bridge Configuration Verified ({{ inventory_hostname }})
          ═════════════════════════════════════════════════════════
          
          The network bridge has been successfully configured and 
          verified on this server.
          
          DETAILS:
            ✓ Bridge interface {{ network_bridge_name }} exists
            ✓ Bridge has the correct IP address: {{ ansible_host }}
            ✓ Network connectivity through bridge is working
            ✓ Bridge netplan configuration is properly installed
            
          RESULT:
            The network bridge is now ready for VMs to connect to it.
            VMs can be created with access to the local network.
          
          ═════════════════════════════════════════════════════════