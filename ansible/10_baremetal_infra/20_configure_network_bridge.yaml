---
# 20_configure_network_bridge.yaml - Set up br0 network bridge for LXD containers
# Run with: ansible-playbook -i inventory/inventory.yaml ansible/10_baremetal_infra/20_configure_network_bridge.yaml

- name: Configure Network Bridge for LXD Containers
  hosts: baremetal
  become: true
  gather_facts: true
  vars:
    network_bridge_name: "br0"

  tasks:
    - name: Verify network gateway is defined in inventory
      ansible.builtin.assert:
        that:
          - network_gateway is defined
        msg: "ERROR: network_gateway must be defined in inventory file"

    - name: Install bridge-utils and related packages
      ansible.builtin.apt:
        name:
          - bridge-utils
          - ifupdown
        state: present
        update_cache: yes

    - name: Get route info to detect primary interface
      ansible.builtin.shell: |
        ip route get 8.8.8.8 2>/dev/null | grep -oP 'dev \K\S+' | head -1
      register: route_info
      changed_when: false
      
    - name: Get primary network interface
      ansible.builtin.set_fact:
        primary_interface: "{{ route_info.stdout }}"
      when: route_info.stdout != ''
      
    - name: Fallback to default interface if route method fails
      ansible.builtin.set_fact:
        primary_interface: "{{ ansible_interfaces | select('match', '^(ens|eth|enp)') | list | first }}"
      when: route_info.stdout == ''
      
    - name: Show detected primary interface
      ansible.builtin.debug:
        msg: "Detected primary interface: {{ primary_interface }}"

    - name: Check for existing netplan configuration files
      ansible.builtin.find:
        paths: /etc/netplan
        patterns: "*.yaml"
      register: netplan_files
      
    - name: Backup existing netplan configuration files
      ansible.builtin.copy:
        src: "{{ item.path }}"
        dest: "{{ item.path }}.bak"
        remote_src: yes
      loop: "{{ netplan_files.files }}"
      when: netplan_files.files | length > 0

    - name: Create br0 bridge netplan configuration
      ansible.builtin.template:
        src: bridge-netplan.yaml.j2
        dest: "/etc/netplan/01-thinkube-config.yaml"
        mode: '0644'
        backup: yes

    # Critical: Create a backup of the current network configuration in case something goes wrong
    - name: Backup current network configuration state to /tmp
      ansible.builtin.shell: |
        ip a > /tmp/network_before_bridge.txt
        ip r > /tmp/routes_before_bridge.txt
      changed_when: false

    # This is a critical step, so let's make sure the user is warned
    - name: Display warning about network reconfiguration
      ansible.builtin.pause:
        prompt: >-
          
          ⚠️  WARNING ⚠️  CRITICAL NETWORK CHANGE AHEAD ⚠️  WARNING ⚠️
          
          The next step will reconfigure the network on the remote hosts.
          This may disrupt your SSH connection temporarily.
          
          BEFORE PROCEEDING:
            ✓ Make sure you have physical access to the machines in case of issues
            ✓ Network configuration will be backed up in /tmp/network_before_bridge.txt
            ✓ If something goes wrong, you can restore using the backup file in /etc/netplan/
          
          Press ENTER to continue or Ctrl+C to abort

    # Apply netplan configuration - This is the critical step that may disrupt SSH connection
    - name: Apply netplan configuration (THIS MAY DISCONNECT YOU TEMPORARILY)
      ansible.builtin.shell: |
        netplan apply
        # Sleep a moment to allow connections to re-establish
        sleep 5
      async: 60
      poll: 10
      
    # Verify the bridge is up and running
    - name: Check bridge interface status
      ansible.builtin.shell: ip link show {{ network_bridge_name }}
      register: bridge_status
      changed_when: false
      
    - name: Display bridge status
      ansible.builtin.debug:
        msg: "{{ bridge_status.stdout_lines }}"
      
    - name: Get updated IP address information
      ansible.builtin.shell: ip a show dev {{ network_bridge_name }}
      register: bridge_ip
      changed_when: false
      
    - name: Display bridge IP information
      ansible.builtin.debug:
        msg: "{{ bridge_ip.stdout_lines }}"
        
    - name: Wait for network to stabilize
      ansible.builtin.wait_for_connection:
        timeout: 60
        delay: 5
      
    - name: Verify bridge is properly routing traffic
      ansible.builtin.shell: ping -c 3 8.8.8.8
      register: ping_result
      changed_when: false
      retries: 3
      delay: 10
      until: ping_result.rc == 0
      
    - name: Display connectivity check result
      ansible.builtin.debug:
        msg: "✅ Network connectivity through bridge is working properly (via {{ network_bridge_name }})"
        
    - name: Notify about desktop networking display
      ansible.builtin.debug:
        msg: >-
          
          ═════════════════════════════════════════════════════════════════════════
          NOTE: On desktop systems ({{ inventory_hostname }})
          ═════════════════════════════════════════════════════════════════════════
          
          The ethernet connection will no longer appear in the Gnome network 
          settings GUI after being moved to the bridge.
          
          This is NORMAL BEHAVIOR.
          
          The network is still fully functional, but is now managed by 
          systemd-networkd rather than NetworkManager.
          ═════════════════════════════════════════════════════════════════════════
      when: server_type == 'desktop'