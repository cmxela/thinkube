---
# 10_setup_lxd_cluster.yaml - Set up LXD cluster across baremetal hosts
# 
# Purpose:
#   Creates and configures an LXD cluster across all baremetal hosts
#   Uses a token-based approach for joining cluster nodes
#   Designed to run in a single execution without requiring tags
#
# Requirements:
#   - SSH connectivity between hosts must be configured
#   - Elevated permissions are required
#
# Run with: 
#   ./scripts/run_ansible.sh ansible/20_lxd_setup/10_setup_lxd_cluster.yaml
#
# Features:
#   - Completely purges and reinstalls LXD on all nodes
#   - Sets up a ZFS-based storage pool
#   - Creates standard VM profiles
#   - Sequential execution: clean > primary > secondary > verify
#   - Automated token generation and exchange

# PLAY 1: Purge LXD from all nodes to start fresh
- name: Purge LXD from all nodes
  hosts: baremetal
  gather_facts: true
  become: true
  
  tasks:
    - name: Display cleanup information
      ansible.builtin.debug:
        msg: >-
          
          ═════════════════════════════════════════════════════════
          🧹 Purging LXD from {{ inventory_hostname }}
          ═════════════════════════════════════════════════════════
          
    - name: Purge LXD completely
      ansible.builtin.shell: |
        echo "Stopping LXD service if running"
        if snap list | grep -q lxd; then
          snap stop lxd || true
          snap remove lxd || true
        fi
        echo "Removing LXD data completely"
        rm -rf /var/snap/lxd
        sleep 5

# PLAY 2: Set up primary node
- name: Set up primary node for LXD cluster
  hosts: "{{ groups['baremetal'][0] }}"  # Primary node (bcn2)
  gather_facts: true
  become: true
  
  vars:
    cluster_name: "thinkube-lxd-cluster"
    cluster_port: 8443
    lxd_trust_password: "{{ lookup('env', 'LXD_TRUST_PASSWORD') | default('thinkube-lxd-cluster', true) }}"
    lxdbr0_ipv4_address: "192.168.100.1/24"
    lxdbr0_ipv6_address: "fd42:d2f8:c3f:9338::1/64"
    temp_dir: "/tmp/lxd-setup-{{ inventory_hostname }}"
  
  tasks:
    - name: Display primary node information
      ansible.builtin.debug:
        msg: >-
          
          ═════════════════════════════════════════════════════════
          🔧 Setting up LXD Cluster PRIMARY NODE ({{ inventory_hostname }})
          ═════════════════════════════════════════════════════════
          Primary: {{ inventory_hostname }} ({{ ansible_host }})
          Secondary: {{ groups['baremetal'][1:] | join(', ') }}
          
    # Install LXD and ZFS
    - name: Install LXD snap
      community.general.snap:
        name: lxd
        state: present
    
    - name: Install ZFS tools
      ansible.builtin.apt:
        name: zfsutils-linux
        state: present
        update_cache: yes
    
    # Create temporary directory
    - name: Create temporary directory for setup files
      ansible.builtin.file:
        path: "{{ temp_dir }}"
        state: directory
        mode: '0755'
    
    # Create preseed file for primary node
    - name: Create preseed file for primary node
      ansible.builtin.copy:
        dest: "{{ temp_dir }}/primary-init.yaml"
        mode: '0644'
        content: |
          config:
            core.https_address: {{ ansible_host }}:{{ cluster_port }}
            core.trust_password: {{ lxd_trust_password }}
          cluster:
            enabled: true
            server_name: {{ inventory_hostname }}
          storage_pools:
          - name: default
            driver: zfs
          networks:
          - name: lxdbr0
            type: bridge
            config:
              ipv4.address: {{ lxdbr0_ipv4_address }}
              ipv4.nat: "true"
              ipv6.address: {{ lxdbr0_ipv6_address }}
              ipv6.nat: "true"
              dns.mode: managed
          profiles:
          - name: default
            devices:
              eth0:
                name: eth0
                network: lxdbr0
                type: nic
              root:
                path: /
                pool: default
                type: disk
    
    # Initialize LXD on primary node
    - name: Initialize LXD on primary node with preseed
      ansible.builtin.shell: |
        cat {{ temp_dir }}/primary-init.yaml | lxd init --preseed
      register: primary_init
    
    # Wait for initialization to complete
    - name: Wait for LXD initialization on primary node
      ansible.builtin.pause:
        seconds: 15
        prompt: "Waiting for LXD to initialize on primary node..."
    
    # Create VM profiles (optional but useful)
    - name: Create VM profile templates
      block:
        # Create vm-networks profile
        - name: Create vm-networks profile
          ansible.builtin.copy:
            dest: "{{ temp_dir }}/vm-networks.yaml"
            mode: '0644'
            content: |
              name: vm-networks
              description: Profile for VM networking setup
              config:
                security.nesting: "true"
              devices:
                eth0:
                  name: eth0
                  nictype: bridged
                  parent: lxdbr0
                  type: nic
                eth1:
                  name: eth1
                  nictype: bridged
                  parent: br0
                  type: nic
        
        - name: Apply vm-networks profile
          ansible.builtin.shell: |
            lxc profile create vm-networks 2>/dev/null || true
            cat {{ temp_dir }}/vm-networks.yaml | lxc profile edit vm-networks
        
        # Create vm-resources profile
        - name: Create vm-resources profile
          ansible.builtin.copy:
            dest: "{{ temp_dir }}/vm-resources.yaml"
            mode: '0644'
            content: |
              name: vm-resources
              description: Profile for VM resource limits
              config:
                limits.cpu: "4"
                limits.memory: 4GB
                limits.memory.enforce: hard
                security.secureboot: "false"
                boot.autostart: "true"
              devices: {}
        
        - name: Apply vm-resources profile
          ansible.builtin.shell: |
            lxc profile create vm-resources 2>/dev/null || true
            cat {{ temp_dir }}/vm-resources.yaml | lxc profile edit vm-resources
        
        # Create vm-gpu profile
        - name: Create vm-gpu profile
          ansible.builtin.copy:
            dest: "{{ temp_dir }}/vm-gpu.yaml"
            mode: '0644'
            content: |
              name: vm-gpu
              description: Profile for VM GPU passthrough
              config:
                nvidia.driver.capabilities: all
                nvidia.runtime: "true"
              devices: {}
        
        - name: Apply vm-gpu profile
          ansible.builtin.shell: |
            lxc profile create vm-gpu 2>/dev/null || true
            cat {{ temp_dir }}/vm-gpu.yaml | lxc profile edit vm-gpu
    
    # Generate and store token for secondary nodes
    - name: Generate join token for bcn1
      ansible.builtin.command: |
        lxc cluster add bcn1
      register: token_result
    
    - name: Extract and save token
      ansible.builtin.set_fact:
        cluster_token: "{{ token_result.stdout_lines[1] | default('') }}"
        cacheable: true
    
    - name: Save token to file for secondary nodes
      ansible.builtin.copy:
        content: "{{ cluster_token }}"
        dest: "/tmp/lxd_cluster_token.txt"
        mode: '0644'
    
    - name: Display token information (truncated)
      ansible.builtin.debug:
        msg: "Generated token for secondary nodes: {{ cluster_token | truncate(20, true) }}..."

# PLAY 3: Join secondary nodes to the cluster
- name: Join secondary nodes to LXD cluster
  hosts: "{{ groups['baremetal'][1:] }}"  # Secondary nodes (bcn1, etc.)
  gather_facts: true
  become: true
  
  vars:
    primary_node: "{{ groups['baremetal'][0] }}"  # First node (bcn2)
    temp_dir: "/tmp/lxd-setup-{{ inventory_hostname }}"
    lxd_trust_password: "{{ lookup('env', 'LXD_TRUST_PASSWORD') | default('thinkube-lxd-cluster', true) }}"
  
  tasks:
    - name: Display secondary node information
      ansible.builtin.debug:
        msg: >-
          
          ═════════════════════════════════════════════════════════
          🔄 Joining LXD Cluster as SECONDARY NODE ({{ inventory_hostname }})
          ═════════════════════════════════════════════════════════
          Primary: {{ primary_node }} ({{ hostvars[primary_node]['ansible_host'] }})
          This node: {{ inventory_hostname }} ({{ ansible_host }})
          
    # Install required software
    - name: Install LXD snap
      community.general.snap:
        name: lxd
        state: present
    
    - name: Install ZFS tools
      ansible.builtin.apt:
        name: zfsutils-linux
        state: present
        update_cache: yes
    
    # Create temporary directory
    - name: Create temporary directory for setup files
      ansible.builtin.file:
        path: "{{ temp_dir }}"
        state: directory
        mode: '0755'
    
    # Get join token from primary node
    - name: Get cluster join token from primary node
      ansible.builtin.slurp:
        src: "/tmp/lxd_cluster_token.txt"
      register: token_file_b64
      delegate_to: "{{ primary_node }}"
    
    - name: Extract token from file
      ansible.builtin.set_fact:
        join_token: "{{ token_file_b64['content'] | b64decode | trim }}"
    
    - name: Display token information (truncated)
      ansible.builtin.debug:
        msg: "Using token from primary node: {{ join_token | truncate(20, true) }}..."
    
    # Create preseed file for joining
    - name: Create preseed file for joining the cluster
      ansible.builtin.copy:
        dest: "{{ temp_dir }}/join-preseed.yaml"
        mode: '0644'
        content: |
          cluster:
            enabled: true
            server_name: {{ inventory_hostname }}
            server_address: {{ ansible_host }}:8443
            cluster_address: {{ hostvars[primary_node]['ansible_host'] }}:8443
            cluster_token: {{ join_token }}
            # Member-specific configuration must only include keys that can be different across nodes
            # For a pure ZFS/dir storage pool, we only need an empty source
            member_config:
            - entity: storage-pool
              name: default
              key: source
              value: ""
          config:
            core.https_address: {{ ansible_host }}:8443
            core.trust_password: {{ lxd_trust_password }}
    
    # Check for existing lxdbr0 and remove it if needed
    - name: Check for existing lxdbr0 and remove if present
      ansible.builtin.shell: |
        if ip link show lxdbr0 2>/dev/null; then
          echo "Removing existing lxdbr0 device..."
          ip link set lxdbr0 down || true
          brctl delbr lxdbr0 || true
        else
          echo "No existing lxdbr0 found"
        fi
      register: bridge_cleanup
      changed_when: "'Removing existing lxdbr0 device' in bridge_cleanup.stdout"

    # Join the cluster
    - name: Join the cluster using preseed file
      ansible.builtin.shell: |
        cat {{ temp_dir }}/join-preseed.yaml | lxd init --preseed --debug
      register: join_result
      failed_when: false

    # Output detailed error information if join fails
    - name: Display join result
      ansible.builtin.debug:
        msg: |
          Join result: {{ join_result.rc == 0 | ternary('SUCCESS', 'FAILED') }}
          Return code: {{ join_result.rc }}

          {{ join_result.stderr | default('No error message') }}
    
    # Wait for join to complete
    - name: Wait for cluster join to complete
      ansible.builtin.pause:
        seconds: 20
        prompt: "Waiting for secondary node to join cluster..."

# PLAY 4: Verify the cluster setup
- name: Verify LXD cluster setup
  hosts: "{{ groups['baremetal'][0] }}"  # Primary node (bcn2)
  gather_facts: true
  become: true
  
  tasks:
    # Check final cluster status
    - name: Get final cluster status
      ansible.builtin.command: |
        lxc cluster list
      register: cluster_status
    
    # Display final cluster status
    - name: Display final cluster status
      ansible.builtin.debug:
        msg: |
          
          ════════════════════════════════════════════════════════════════════════
          FINAL LXD CLUSTER STATUS
          ════════════════════════════════════════════════════════════════════════
          
          {{ cluster_status.stdout }}
          
          ════════════════════════════════════════════════════════════════════════
    
    # Parse cluster members
    - name: Parse cluster member information
      ansible.builtin.set_fact:
        cluster_members: "{{ cluster_status.stdout | regex_findall('bcn\\d') | unique }}"
        expected_members: "{{ groups['baremetal'] | length }}"
    
    # Verify all nodes joined
    - name: Verify all expected nodes are in the cluster
      ansible.builtin.assert:
        that:
          - "cluster_members | length | int == expected_members | int"
          - "item in cluster_status.stdout"
        fail_msg: "ERROR: Node {{ item }} is not in the cluster"
        success_msg: "✅ Node {{ item }} is in the cluster"
      loop: "{{ groups['baremetal'] }}"
    
    # Display completion message
    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          
          ════════════════════════════════════════════════════════════════════════
          ✅ LXD CLUSTER SETUP COMPLETED SUCCESSFULLY
          ════════════════════════════════════════════════════════════════════════
          
          The LXD cluster has been successfully set up across all nodes:
          {{ groups['baremetal'] | join(', ') }}
          
          PROFILES CREATED:
          - default: Basic container profile
          - vm-networks: Network configuration for VMs
          - vm-resources: Resource limits for VMs
          - vm-gpu: GPU passthrough configuration
          
          NEXT STEPS:
          Run the LXD profiles setup playbook:
          $ ./scripts/run_ansible.sh ansible/20_lxd_setup/20_setup_lxd_profiles.yaml
          
          ════════════════════════════════════════════════════════════════════════