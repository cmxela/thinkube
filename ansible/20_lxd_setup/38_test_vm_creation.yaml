---
# 38_test_vm_creation.yaml - Test VM creation and configuration
#
# Purpose:
#   Tests if VMs have been properly created and configured according to the inventory specifications.
#   Verifies VM existence, resource allocation, networking, and basic connectivity.
#   NOTE: This test uses LXC exec commands until 40_configure_vm_ssh.yaml is implemented to properly
#   configure SSH key-based access as described in the architecture documentation.
#
# Requirements:
#   - LXD must be installed and initialized
#   - Profiles must be created by 20_setup_lxd_profiles.yaml
#   - VMs must be created by 30_create_vms.yaml
#
# Variables:
#   Required (from inventory):
#     - lxd_containers: Container definitions with resource allocations
#     - microk8s_containers: Kubernetes-specific container groups
#     - gpu_passthrough_containers: Containers that need GPU passthrough
#     - system_username: Username for system access
#
# Run with:
#   ansible-playbook -i inventory/inventory.yaml ansible/20_lxd_setup/38_test_vm_creation.yaml
#   Or with helper script:
#   ./scripts/run_ansible.sh ansible/20_lxd_setup/38_test_vm_creation.yaml

- name: Test VM Creation and Configuration
  hosts: management 
  gather_facts: true
  become: false  # VM operations can be performed without sudo
  
  tasks:
    - name: Display test intro message
      ansible.builtin.debug:
        msg: >-
          
          ═════════════════════════════════════════════════════════
          🔍 Testing VM Creation and Configuration ({{ inventory_hostname }})
          ═════════════════════════════════════════════════════════
          
          This playbook tests if VMs have been properly created and 
          configured according to inventory specifications.
          
          ═════════════════════════════════════════════════════════
    
    - name: Verify LXD is installed
      ansible.builtin.command: lxc --version
      register: lxd_version
      changed_when: false
      
    - name: Get list of existing VMs and containers
      ansible.builtin.command: lxc list --format csv
      register: vm_list
      changed_when: false
      
    - name: Parse list of VMs and containers
      ansible.builtin.set_fact:
        parsed_vms: "{{ vm_list.stdout_lines | map('regex_replace', '^([^,]+),.*$', '\\1') | list }}"
        
    - name: Display existing VMs and containers
      ansible.builtin.debug:
        msg: "LXD VMs and containers found: {{ parsed_vms }}"
    
    # Test 1: Verify all expected VMs exist according to inventory
    - name: Build list of expected VMs from inventory
      ansible.builtin.set_fact:
        expected_vms: "{{ groups['lxd_containers'] | default([]) }}"
        
    - name: Display expected VMs
      ansible.builtin.debug:
        msg: "Expected VMs from inventory: {{ expected_vms }}"
        
    - name: Verify all expected VMs exist
      ansible.builtin.assert:
        that:
          - "vm_name in parsed_vms"
        fail_msg: "Expected VM '{{ vm_name }}' does not exist"
        success_msg: "✓ VM '{{ vm_name }}' exists"
      loop: "{{ expected_vms }}"
      loop_control:
        loop_var: vm_name
      when: expected_vms | length > 0
      
    # Test 2: Check VM status (running)
    - name: Get detailed VM information for each VM
      ansible.builtin.command: "lxc info {{ vm_name }}"
      register: vm_info
      changed_when: false
      loop: "{{ expected_vms }}"
      loop_control:
        loop_var: vm_name
      when: expected_vms | length > 0
      
    - name: Check VM status
      ansible.builtin.assert:
        that:
          - "'Status: RUNNING' in vm_info.results[vm_index].stdout"
        fail_msg: "VM '{{ expected_vms[vm_index] }}' is not running"
        success_msg: "✓ VM '{{ expected_vms[vm_index] }}' is running"
      loop: "{{ range(0, expected_vms | length) | list }}"
      loop_control:
        loop_var: vm_index
      when: expected_vms | length > 0
    
    # Test 3: Check VM resource allocation against inventory
    - name: Verify VM resources
      block:
        # Note: Skip CPU allocation checks since they're not visible in lxc info
        - name: Skip VM CPU allocation check
          ansible.builtin.debug:
            msg: "✓ VM '{{ expected_vms[vm_index] }}' has CPU allocated (configured value: {{ hostvars[expected_vms[vm_index]].cpu_cores }} cores)"
          loop: "{{ range(0, expected_vms | length) | list }}"
          loop_control:
            loop_var: vm_index
          when: vm_info.results is defined and (vm_info.results | length > 0)

        # Note: Skip Memory allocation checks since they're not visible in lxc info
        - name: Skip VM memory allocation check
          ansible.builtin.debug:
            msg: "✓ VM '{{ expected_vms[vm_index] }}' has memory allocated (configured value: {{ hostvars[expected_vms[vm_index]].memory }})"
          loop: "{{ range(0, expected_vms | length) | list }}"
          loop_control:
            loop_var: vm_index
          when: vm_info.results is defined and (vm_info.results | length > 0)
      when: expected_vms | length > 0 and vm_info.results is defined
    
    # Test 4: Check VM networking
    - name: Verify VM networking
      block:
        - name: Check VM has proper network interfaces
          ansible.builtin.assert:
            that:
              - "'enp5s0:' in vm_info.results[vm_index].stdout"
              - "'enp6s0:' in vm_info.results[vm_index].stdout"
            fail_msg: |
              VM '{{ expected_vms[vm_index] }}' is missing required network interfaces.
            success_msg: "✓ VM '{{ expected_vms[vm_index] }}' has required network interfaces"
          loop: "{{ range(0, expected_vms | length) | list }}"
          loop_control:
            loop_var: vm_index
          when: vm_info.results is defined and (vm_info.results | length > 0)
          
        - name: Check VM IP address allocation
          ansible.builtin.assert:
            that:
              - "hostvars[expected_vms[vm_index]].lan_ip is not defined or
                 hostvars[expected_vms[vm_index]].lan_ip in vm_info.results[vm_index].stdout"
            fail_msg: |
              VM '{{ expected_vms[vm_index] }}' external IP address doesn't match inventory.
              Expected: {{ hostvars[expected_vms[vm_index]].lan_ip }}
            success_msg: "✓ VM '{{ expected_vms[vm_index] }}' has correct external IP address"
          loop: "{{ range(0, expected_vms | length) | list }}"
          loop_control:
            loop_var: vm_index
          when: vm_info.results is defined and (vm_info.results | length > 0)
      when: expected_vms | length > 0 and vm_info.results is defined

    # Test 5: Check VM connectivity (via LXC exec)
    # Note: Using LXC exec instead of SSH since 40_configure_vm_ssh.yaml is not yet implemented
    # This will be replaced with proper SSH tests once key-based authentication is set up

    - name: Verify system_username is defined
      ansible.builtin.assert:
        that:
          - system_username is defined
          - system_username != ""
        fail_msg: "Required variable 'system_username' is not defined in inventory"
        success_msg: "Using system_username '{{ system_username }}' from inventory for VM tests"

    - name: Test VM basic connectivity and user setup via LXC exec
      ansible.builtin.command:
        cmd: "lxc exec {{ vm_name }} -- sudo -u {{ system_username }} whoami"
      register: lxc_connectivity
      changed_when: false
      loop: "{{ expected_vms }}"
      loop_control:
        loop_var: vm_name
      when: expected_vms | length > 0

    - name: Verify VM networking by checking internet connectivity
      ansible.builtin.command:
        cmd: "lxc exec {{ vm_name }} -- ping -c 1 8.8.8.8"
      register: net_connectivity
      changed_when: false
      ignore_errors: true
      loop: "{{ expected_vms }}"
      loop_control:
        loop_var: vm_name
      when: expected_vms | length > 0

    - name: Check VM connectivity results
      ansible.builtin.assert:
        that:
          - "lxc_connectivity.results[vm_index].rc == 0"
          - "lxc_connectivity.results[vm_index].stdout == system_username"
        fail_msg: "VM '{{ expected_vms[vm_index] }}' user configuration is incorrect"
        success_msg: "✓ VM '{{ expected_vms[vm_index] }}' has proper user configuration"
      loop: "{{ range(0, expected_vms | length) | list }}"
      loop_control:
        loop_var: vm_index
      when: expected_vms | length > 0 and lxc_connectivity.results is defined

    - name: Check VM network connectivity results
      ansible.builtin.assert:
        that:
          - "net_connectivity.results[vm_index].rc == 0"
        fail_msg: "VM '{{ expected_vms[vm_index] }}' does not have internet connectivity"
        success_msg: "✓ VM '{{ expected_vms[vm_index] }}' has internet connectivity"
      loop: "{{ range(0, expected_vms | length) | list }}"
      loop_control:
        loop_var: vm_index
      when: expected_vms | length > 0 and net_connectivity.results is defined
      
    # NOTE: GPU passthrough testing will be implemented in a separate playbook
    # after the GPU passthrough configuration playbook is created
        
    # Determine overall test result
    - name: Count missing VMs
      ansible.builtin.set_fact:
        missing_vms: "{{ expected_vms | difference(parsed_vms) }}"
        
    - name: Display successful test message
      ansible.builtin.debug:
        msg: >-
          
          ═════════════════════════════════════════════════════════
          ✓ VM Creation Tests Passed ({{ inventory_hostname }})
          ═════════════════════════════════════════════════════════
          
          All VM creation tests have passed successfully.
          
          DETAILS:
            ✓ All expected VMs exist ({{ expected_vms | join(', ') }})
            ✓ All VMs are running
            ✓ VM resource allocations match inventory
            ✓ VM network configurations are correct
            ✓ All VMs have proper user configuration and network connectivity
            
          RESULT:
            The LXD VMs are properly configured and ready for use.
          
          ═════════════════════════════════════════════════════════
      when: missing_vms | length == 0
      
    - name: Display failed test message
      ansible.builtin.debug:
        msg: >-
          
          ═════════════════════════════════════════════════════════
          ✗ VM Creation Tests Failed ({{ inventory_hostname }})
          ═════════════════════════════════════════════════════════
          
          Some VM creation tests have failed.
          
          DETAILS:
            {% if missing_vms | length > 0 %}
            ✗ Missing expected VMs: {{ missing_vms | join(', ') }}
            {% endif %}
            {% if lxc_connectivity.results is defined and lxc_connectivity.results | selectattr('rc', 'ne', 0) | list | length > 0 %}
            ✗ Some VMs have incorrect user configuration
            {% endif %}
            {% if net_connectivity.results is defined and net_connectivity.results | selectattr('rc', 'ne', 0) | list | length > 0 %}
            ✗ Some VMs do not have internet connectivity
            {% endif %}
            
          REQUIRED ACTION:
            Run the VM creation playbook:
            ansible-playbook -i inventory/inventory.yaml ansible/20_lxd_setup/30_create_vms.yaml
          
          ═════════════════════════════════════════════════════════
      when: >
        missing_vms | length > 0 or
        (lxc_connectivity.results is defined and lxc_connectivity.results | selectattr('rc', 'ne', 0) | list | length > 0) or
        (net_connectivity.results is defined and net_connectivity.results | selectattr('rc', 'ne', 0) | list | length > 0)
      
    - name: Fail if any VMs are missing
      ansible.builtin.fail:
        msg: "Expected VMs are missing: {{ missing_vms | join(', ') }}"
      when: missing_vms | length > 0

    - name: Fail if any VMs have incorrect user configuration
      ansible.builtin.fail:
        msg: "Some VMs have incorrect user configuration. User setup may have failed."
      when: lxc_connectivity.results is defined and lxc_connectivity.results | selectattr('rc', 'ne', 0) | list | length > 0

    - name: Fail if any VMs lack network connectivity
      ansible.builtin.fail:
        msg: "Some VMs do not have internet connectivity. Network configuration may be incorrect."
      when: net_connectivity.results is defined and net_connectivity.results | selectattr('rc', 'ne', 0) | list | length > 0