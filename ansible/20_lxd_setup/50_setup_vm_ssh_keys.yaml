---
# 50_setup_vm_ssh_keys.yaml - Establish SSH key-based access from management node to LXD VMs
# 
# Purpose:
#   Sets up SSH key-based authentication from the management node to all LXD VMs
#   to enable password-less automation for subsequent playbooks.
#
# Requirements:
#   - SSH server installed on all VMs (installed by 30_create_vms.yaml)
#   - VMs must be running and accessible via their IPs
#   - Password authentication enabled for initial setup
#
# Variables:
#   Required (from inventory):
#     - ansible_host: IP address of each VM
#     - system_username: Username on the VMs
#   Optional:
#     - ssh_key_name: Name of SSH key file (default: id_rsa)
#     - ssh_key_type: Type of SSH key (default: rsa)
#
# Run with: 
#   ./scripts/run_ansible.sh ansible/20_lxd_setup/50_setup_vm_ssh_keys.yaml
#

- name: Setup SSH Keys for LXD VMs
  hosts: management
  gather_facts: true
  become: false
  vars:
    ssh_key_name: "id_rsa"
    ssh_key_type: "rsa"
    ansible_become_pass: "{{ lookup('env', 'ANSIBLE_SUDO_PASS') }}"
    # Collect LXD VM hostnames and IPs
    vms_to_configure: "{{ groups['lxd_containers'] | default([]) }}"
  
  tasks:
    - name: Display setup intro message
      ansible.builtin.debug:
        msg: >-
          
          ═════════════════════════════════════════════════════════
          🔑 Setting up SSH Keys for LXD VMs ({{ inventory_hostname }})
          ═════════════════════════════════════════════════════════
          
          This playbook sets up SSH key-based authentication from the 
          management node to all LXD VMs to enable password-less automation.
          
          VMs to configure: {{ vms_to_configure | join(', ') }}
          
          ═════════════════════════════════════════════════════════
    
    # Verify we have VMs to configure
    - name: Check if we have VMs to configure
      ansible.builtin.assert:
        that:
          - vms_to_configure | length > 0
        fail_msg: |
          ERROR: No VMs found to configure SSH keys
          
          DETAILS:
          - No VMs were found in the inventory group 'lxd_containers'
          
          REQUIRED ACTION:
          - Make sure VMs are created first using 30_create_vms.yaml
          - Check inventory group definition for 'lxd_containers'
        success_msg: "✓ Found {{ vms_to_configure | length }} VMs to configure: {{ vms_to_configure | join(', ') }}"

    # Ensure .ssh directory exists
    - name: Ensure .ssh directory exists
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/.ssh"
        state: directory
        mode: '0700'

    # Generate SSH key if it doesn't exist
    - name: Check if SSH key exists
      ansible.builtin.stat:
        path: "{{ ansible_user_dir }}/.ssh/{{ ssh_key_name }}"
      register: ssh_key_check

    - name: Generate SSH key if it doesn't exist
      ansible.builtin.shell: |
        ssh-keygen -t {{ ssh_key_type }} -f {{ ansible_user_dir }}/.ssh/{{ ssh_key_name }} -C "{{ system_username }}@{{ inventory_hostname }}" -N ""
        echo "Key generated"
      register: ssh_key_result
      changed_when: "'Key generated' in ssh_key_result.stdout"
      when: not ssh_key_check.stat.exists

    # Get public key content
    - name: Get public key content
      ansible.builtin.command: cat {{ ansible_user_dir }}/.ssh/{{ ssh_key_name }}.pub
      register: pubkey_content
      changed_when: false

    # Create SSH config for VMs
    - name: Create SSH config directory
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/.ssh/thinkube_vms"
        state: directory
        mode: '0700'

    # Generate vm_ssh_config.j2 template directly
    - name: Create VM SSH config snippet
      ansible.builtin.copy:
        dest: "{{ ansible_user_dir }}/.ssh/thinkube_vms/vm_ssh_config"
        mode: '0600'
        content: |
          # BEGIN-THINKUBE-VMS
          # Thinkube VM SSH Configuration
          # Generated by Ansible on {{ ansible_date_time.date }}
          # WARNING: DO NOT EDIT THE SECTION BETWEEN BEGIN-THINKUBE-VMS and END-THINKUBE-VMS markers
          
          {% for vm in vms_to_configure %}
          Host {{ vm }}
            HostName {{ hostvars[vm]['lan_ip'] }}
            User {{ system_username }}
            IdentityFile {{ ansible_user_dir }}/.ssh/{{ ssh_key_name }}
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
          
          {% endfor %}
          # END-THINKUBE-VMS

    # Check if SSH config already has Thinkube VMs section
    - name: Check if SSH config already has Thinkube VMs section
      ansible.builtin.shell: |
        if [ -f "{{ ansible_user_dir }}/.ssh/config" ]; then
          grep -q "BEGIN-THINKUBE-VMS" "{{ ansible_user_dir }}/.ssh/config" && echo "found" || echo "not found"
        else
          echo "not found"
        fi
      register: has_vms_section
      changed_when: false

    # Check if SSH config exists
    - name: Check if SSH config exists
      ansible.builtin.stat:
        path: "{{ ansible_user_dir }}/.ssh/config"
      register: ssh_config_stat

    # Create SSH config if it doesn't exist
    - name: Create new SSH config file if it doesn't exist
      ansible.builtin.copy:
        content: |
          # SSH Configuration for Thinkube
          # Generated by Ansible on {{ ansible_date_time.date }}
          
          {{ lookup('file', ansible_user_dir + '/.ssh/thinkube_vms/vm_ssh_config') }}
        dest: "{{ ansible_user_dir }}/.ssh/config"
        mode: '0600'
      when: not ssh_config_stat.stat.exists

    # Update existing SSH config
    - name: Update SSH config if it exists
      block:
        # If section exists, update it
        - name: Update existing Thinkube VMs section
          ansible.builtin.shell: |
            # Create new config file
            touch "{{ ansible_user_dir }}/.ssh/config.new"
            
            # Add everything before the BEGIN marker
            sed -n '1,/# BEGIN-THINKUBE-VMS/p' "{{ ansible_user_dir }}/.ssh/config" | \
            grep -v "# BEGIN-THINKUBE-VMS" > "{{ ansible_user_dir }}/.ssh/config.new"
            
            # Add the new VMs snippet
            cat "{{ ansible_user_dir }}/.ssh/thinkube_vms/vm_ssh_config" >> "{{ ansible_user_dir }}/.ssh/config.new"
            
            # Add everything after the END marker
            sed -n '/# END-THINKUBE-VMS/,$p' "{{ ansible_user_dir }}/.ssh/config" | \
            grep -v "# END-THINKUBE-VMS" >> "{{ ansible_user_dir }}/.ssh/config.new"
            
            # Replace the original file
            mv "{{ ansible_user_dir }}/.ssh/config.new" "{{ ansible_user_dir }}/.ssh/config"
            chmod 600 "{{ ansible_user_dir }}/.ssh/config"
          when: has_vms_section.stdout == "found"

        # If no section exists yet, append it
        - name: Append VMs section to existing SSH config
          ansible.builtin.shell: |
            # Add an empty line for separation
            echo "" >> "{{ ansible_user_dir }}/.ssh/config"
            
            # Add the VMs snippet
            cat "{{ ansible_user_dir }}/.ssh/thinkube_vms/vm_ssh_config" >> "{{ ansible_user_dir }}/.ssh/config"
          when: has_vms_section.stdout == "not found"
      when: ssh_config_stat.stat.exists

    # Clean up temporary files
    - name: Clean up temporary files
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/.ssh/thinkube_vms"
        state: absent

    # Copy SSH public key to VMs
    - name: Copy SSH public key to VMs
      ansible.builtin.shell: |
        # Copy the public key to VM
        lxc file push {{ ansible_user_dir }}/.ssh/{{ ssh_key_name }}.pub {{ item }}/tmp/{{ ssh_key_name }}.pub
        
        # Add it to authorized_keys in the VM
        lxc exec {{ item }} -- bash -c "mkdir -p /home/{{ system_username }}/.ssh && \
                                       cat /tmp/{{ ssh_key_name }}.pub >> /home/{{ system_username }}/.ssh/authorized_keys && \
                                       chown -R {{ system_username }}:{{ system_username }} /home/{{ system_username }}/.ssh && \
                                       chmod 700 /home/{{ system_username }}/.ssh && \
                                       chmod 600 /home/{{ system_username }}/.ssh/authorized_keys && \
                                       rm /tmp/{{ ssh_key_name }}.pub"
        echo "SSH public key added to {{ item }}"
      register: key_copy
      changed_when: "'SSH public key added to' in key_copy.stdout"
      loop: "{{ vms_to_configure }}"

    # Test SSH connections to VMs
    - name: Test SSH connections to VMs
      ansible.builtin.shell: |
        ssh -i {{ ansible_user_dir }}/.ssh/{{ ssh_key_name }} \
            -o ConnectTimeout=5 \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            {{ system_username }}@{{ hostvars[item]['lan_ip'] }} \
            "echo 'Successfully connected from {{ inventory_hostname }} to {{ item }} IP={{ hostvars[item]['lan_ip'] }}'"
      register: ssh_test
      changed_when: false
      failed_when: "ssh_test.rc != 0"
      loop: "{{ vms_to_configure }}"

    # Display successful setup message
    - name: Display successful setup message
      ansible.builtin.debug:
        msg: >-
          
          ═════════════════════════════════════════════════════════
          ✅ SSH Keys Setup Complete for LXD VMs ({{ inventory_hostname }})
          ═════════════════════════════════════════════════════════
          
          SSH key authentication has been successfully configured.
          
          DETAILS:
            ✓ Generated or used existing SSH key: {{ ansible_user_dir }}/.ssh/{{ ssh_key_name }}
            ✓ Distributed public key to {{ vms_to_configure | length }} VMs
            ✓ Updated SSH config file with VM entries
            ✓ Verified connectivity to all VMs
          
          RESULT:
            Passwordless SSH is now enabled from this management node to all VMs.
            You can connect using: ssh {{ system_username }}@<vm_hostname>
          
          ═════════════════════════════════════════════════════════