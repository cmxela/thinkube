---
# Tasks to install packages on a single VM
# This file is included by 30-4_install_vm_packages.yaml

- name: Display VM information
  ansible.builtin.debug:
    msg: "Installing packages on VM: {{ current_vm }}"

# Check current DNS configuration
- name: Check current DNS configuration ({{ current_vm }})
  ansible.builtin.shell: |
    echo "=== Checking DNS configuration for {{ current_vm }} ==="
    echo "--- /etc/resolv.conf ---"
    lxc exec {{ current_vm }} -- cat /etc/resolv.conf
    echo "--- systemd-resolved status ---"
    lxc exec {{ current_vm }} -- systemctl status systemd-resolved --no-pager || true
    echo "--- netplan config ---"
    lxc exec {{ current_vm }} -- cat /etc/netplan/*.yaml || true
  register: dns_check
  changed_when: false
  failed_when: false

- name: Display DNS configuration status
  ansible.builtin.debug:
    var: dns_check.stdout_lines

# If DNS is not working, try to restart systemd-resolved
- name: Restart systemd-resolved if needed ({{ current_vm }})
  ansible.builtin.shell: |
    # Check if resolv.conf has nameservers
    if ! lxc exec {{ current_vm }} -- grep -q "nameserver" /etc/resolv.conf; then
      echo "No nameservers found, restarting systemd-resolved..."
      lxc exec {{ current_vm }} -- systemctl restart systemd-resolved
      sleep 2
    fi
  register: dns_restart
  changed_when: "'restarting' in dns_restart.stdout"

# Verify VM network connectivity first
- name: Verify network connectivity ({{ current_vm }})
  ansible.builtin.command: lxc exec {{ current_vm }} -- ping -c 2 8.8.8.8
  register: network_test
  changed_when: false
  failed_when: network_test.rc != 0
  retries: 3
  delay: 5
  until: network_test.rc == 0

# Test DNS resolution
- name: Test DNS resolution ({{ current_vm }})
  ansible.builtin.command: lxc exec {{ current_vm }} -- ping -c 2 archive.ubuntu.com
  register: dns_test
  changed_when: false
  failed_when: dns_test.rc != 0
  retries: 3
  delay: 5
  until: dns_test.rc == 0

# Update apt cache
- name: Update apt cache ({{ current_vm }})
  ansible.builtin.command: lxc exec {{ current_vm }} -- apt-get update
  register: apt_update
  changed_when: true
  failed_when: apt_update.rc != 0
  retries: 3
  delay: 10
  until: apt_update.rc == 0

# Install essential packages in two steps (skip iptables-persistent which prompts)
- name: Install essential packages ({{ current_vm }})
  ansible.builtin.command: >
    lxc exec {{ current_vm }} -- apt-get install -y 
    curl wget git htop vim unzip
    python3 python3-pip
    net-tools dnsutils
  register: essential_install
  changed_when: true
  failed_when: essential_install.rc != 0
  retries: 2
  delay: 10
  until: essential_install.rc == 0

# Install iptables-persistent with noninteractive frontend to avoid prompts
- name: Install iptables-persistent noninteractively ({{ current_vm }})
  ansible.builtin.command: >
    lxc exec {{ current_vm }} -- bash -c 'DEBIAN_FRONTEND=noninteractive apt-get install -y iptables-persistent'
  register: iptables_install
  changed_when: true
  failed_when: iptables_install.rc != 0
  retries: 2
  delay: 10
  until: iptables_install.rc == 0

# Install VM-specific packages if defined
- name: Check if VM-specific packages are defined ({{ current_vm }})
  ansible.builtin.set_fact:
    has_specific_packages: "{{ hostvars[current_vm]['vm_packages'] is defined and hostvars[current_vm]['vm_packages'] | length > 0 }}"

- name: Display VM-specific packages status ({{ current_vm }})
  ansible.builtin.debug:
    msg: >-
      {% if has_specific_packages %}
      VM-specific packages defined for {{ current_vm }}: {{ hostvars[current_vm]['vm_packages'] }}
      {% else %}
      No VM-specific packages defined for {{ current_vm }}
      {% endif %}

- name: Install VM-specific packages ({{ current_vm }})
  ansible.builtin.command: >
    lxc exec {{ current_vm }} -- apt-get install -y {{ hostvars[current_vm]['vm_packages'] }}
  register: vm_specific_install
  changed_when: true
  failed_when: vm_specific_install.rc != 0
  when: has_specific_packages | bool
  retries: 2
  delay: 10
  until: vm_specific_install.rc == 0
  
# Verify essential packages were installed
- name: Verify essential packages installation ({{ current_vm }})
  ansible.builtin.command: lxc exec {{ current_vm }} -- dpkg -l curl wget git htop vim
  register: verify_essential
  changed_when: false
  failed_when: verify_essential.rc != 0
  
# Display package installation status
- name: Display package installation status ({{ current_vm }})
  ansible.builtin.debug:
    msg: "âœ… Packages installed successfully on {{ current_vm }}"