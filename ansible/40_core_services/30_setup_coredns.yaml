---
# 60_setup_coredns.yaml - Configure CoreDNS for MicroK8s cluster
# Run with: ansible-playbook -i inventory/inventory.yaml ansible/vm_deployment/60_setup_coredns.yaml

- name: Configure CoreDNS for MicroK8s Cluster
  hosts: baremetal
  become: false
  gather_facts: true
  
  vars:
    dns_server_ip: "{{ hostvars['dns1']['zerotier_ip'] | default('192.168.191.1') }}"
  
  tasks:
    # Phase 1: Verify MicroK8s cluster is ready
    - name: Verify MicroK8s cluster is ready
      block:
        - name: Check MicroK8s status on control plane
          ansible.builtin.command: >
            lxc exec {{ groups['microk8s_control_plane'][0] }} -- microk8s status --wait-ready
          register: microk8s_ready
          failed_when: microk8s_ready.rc != 0
          when: 
            - "'microk8s_control_plane' in groups"
            - groups['microk8s_control_plane'] | length > 0
            - inventory_hostname == hostvars[groups['microk8s_control_plane'][0]]['parent_host'] | default('none')
          become: true
          
        # Check if DNS addon is enabled
        - name: Check if DNS addon is enabled
          ansible.builtin.command: >
            lxc exec {{ groups['microk8s_control_plane'][0] }} -- microk8s status | grep dns
          register: dns_enabled
          changed_when: false
          failed_when: false
          when: 
            - "'microk8s_control_plane' in groups"
            - groups['microk8s_control_plane'] | length > 0
            - inventory_hostname == hostvars[groups['microk8s_control_plane'][0]]['parent_host'] | default('none')
          become: true
          
        # Enable DNS addon if not already enabled
        - name: Enable DNS addon if not already enabled
          ansible.builtin.command: >
            lxc exec {{ groups['microk8s_control_plane'][0] }} -- microk8s enable dns
          register: enable_dns
          failed_when: enable_dns.rc != 0
          when: 
            - "'microk8s_control_plane' in groups"
            - groups['microk8s_control_plane'] | length > 0
            - inventory_hostname == hostvars[groups['microk8s_control_plane'][0]]['parent_host'] | default('none')
            - dns_enabled.rc != 0 or "enabled" not in dns_enabled.stdout
          become: true
          
        # Wait for DNS addon to be ready if newly enabled
        - name: Wait for DNS addon to be ready if newly enabled
          ansible.builtin.pause:
            seconds: 30
          when: enable_dns is defined and enable_dns is changed
      tags: verify_cluster
    
    # Phase 2: Generate CoreDNS ConfigMap
    - name: Generate CoreDNS ConfigMap
      block:
        # Generate CoreDNS ConfigMap from template
        - name: Generate CoreDNS ConfigMap from template
          ansible.builtin.template:
            src: "{{ playbook_dir }}/templates/coredns_configmap.j2"
            dest: "/tmp/coredns_configmap.yaml"
            mode: '0644'
          when: 
            - "'microk8s_control_plane' in groups"
            - groups['microk8s_control_plane'] | length > 0
            - inventory_hostname == hostvars[groups['microk8s_control_plane'][0]]['parent_host'] | default('none')
          vars:
            dns_server_ip: "{{ dns_server_ip }}"
          
        # Copy ConfigMap to control plane VM
        - name: Copy ConfigMap to control plane VM
          ansible.builtin.command: >
            lxc file push /tmp/coredns_configmap.yaml {{ groups['microk8s_control_plane'][0] }}/tmp/coredns_configmap.yaml
          when: 
            - "'microk8s_control_plane' in groups"
            - groups['microk8s_control_plane'] | length > 0
            - inventory_hostname == hostvars[groups['microk8s_control_plane'][0]]['parent_host'] | default('none')
          become: true
      tags: generate_configmap
    
    # Phase 3: Apply CoreDNS ConfigMap
    - name: Apply CoreDNS ConfigMap
      block:
        # Apply ConfigMap
        - name: Apply CoreDNS ConfigMap
          ansible.builtin.command: >
            lxc exec {{ groups['microk8s_control_plane'][0] }} -- microk8s kubectl apply -f /tmp/coredns_configmap.yaml
          register: apply_configmap
          failed_when: apply_configmap.rc != 0
          when: 
            - "'microk8s_control_plane' in groups"
            - groups['microk8s_control_plane'] | length > 0
            - inventory_hostname == hostvars[groups['microk8s_control_plane'][0]]['parent_host'] | default('none')
          become: true
          
        # Display ConfigMap application results
        - name: Display ConfigMap application results
          ansible.builtin.debug:
            msg: |
              CoreDNS ConfigMap application results:
              {{ apply_configmap.stdout_lines | join('\n') }}
          when: 
            - "'microk8s_control_plane' in groups"
            - groups['microk8s_control_plane'] | length > 0
            - inventory_hostname == hostvars[groups['microk8s_control_plane'][0]]['parent_host'] | default('none')
            - apply_configmap is defined
      tags: apply_configmap
    
    # Phase 4: Restart CoreDNS pods
    - name: Restart CoreDNS pods
      block:
        # Restart CoreDNS deployment
        - name: Restart CoreDNS deployment
          ansible.builtin.command: >
            lxc exec {{ groups['microk8s_control_plane'][0] }} -- microk8s kubectl -n kube-system rollout restart deployment coredns
          register: restart_coredns
          failed_when: restart_coredns.rc != 0
          when: 
            - "'microk8s_control_plane' in groups"
            - groups['microk8s_control_plane'] | length > 0
            - inventory_hostname == hostvars[groups['microk8s_control_plane'][0]]['parent_host'] | default('none')
          become: true
          
        # Display CoreDNS restart results
        - name: Display CoreDNS restart results
          ansible.builtin.debug:
            msg: |
              CoreDNS restart results:
              {{ restart_coredns.stdout_lines | join('\n') }}
          when: 
            - "'microk8s_control_plane' in groups"
            - groups['microk8s_control_plane'] | length > 0
            - inventory_hostname == hostvars[groups['microk8s_control_plane'][0]]['parent_host'] | default('none')
            - restart_coredns is defined
      tags: restart_coredns
    
    # Phase 5: Wait for CoreDNS to be ready
    - name: Wait for CoreDNS to be ready
      ansible.builtin.pause:
        seconds: 30
      when: restart_coredns is defined and restart_coredns is changed
      tags: wait_coredns
    
    # Phase 6: Verify CoreDNS configuration
    - name: Verify CoreDNS configuration
      block:
        # Check CoreDNS ConfigMap
        - name: Check CoreDNS ConfigMap
          ansible.builtin.command: >
            lxc exec {{ groups['microk8s_control_plane'][0] }} -- microk8s kubectl -n kube-system get configmap coredns -o yaml
          register: coredns_configmap
          failed_when: false
          when: 
            - "'microk8s_control_plane' in groups"
            - groups['microk8s_control_plane'] | length > 0
            - inventory_hostname == hostvars[groups['microk8s_control_plane'][0]]['parent_host'] | default('none')
          become: true
          
        # Display CoreDNS ConfigMap
        - name: Display CoreDNS ConfigMap
          ansible.builtin.debug:
            msg: |
              ════════════════════════════════════════════════════════════════════════
              COREDNS CONFIGMAP
              ════════════════════════════════════════════════════════════════════════
              
              {{ coredns_configmap.stdout_lines | join('\n') }}
              
              ════════════════════════════════════════════════════════════════════════
          when: 
            - "'microk8s_control_plane' in groups"
            - groups['microk8s_control_plane'] | length > 0
            - inventory_hostname == hostvars[groups['microk8s_control_plane'][0]]['parent_host'] | default('none')
            - coredns_configmap is defined
          
        # Check CoreDNS pods
        - name: Check CoreDNS pods
          ansible.builtin.command: >
            lxc exec {{ groups['microk8s_control_plane'][0] }} -- microk8s kubectl -n kube-system get pods -l k8s-app=kube-dns
          register: coredns_pods
          failed_when: false
          when: 
            - "'microk8s_control_plane' in groups"
            - groups['microk8s_control_plane'] | length > 0
            - inventory_hostname == hostvars[groups['microk8s_control_plane'][0]]['parent_host'] | default('none')
          become: true
          
        # Display CoreDNS pods
        - name: Display CoreDNS pods
          ansible.builtin.debug:
            msg: |
              ════════════════════════════════════════════════════════════════════════
              COREDNS PODS
              ════════════════════════════════════════════════════════════════════════
              
              {{ coredns_pods.stdout_lines | join('\n') }}
              
              ════════════════════════════════════════════════════════════════════════
          when: 
            - "'microk8s_control_plane' in groups"
            - groups['microk8s_control_plane'] | length > 0
            - inventory_hostname == hostvars[groups['microk8s_control_plane'][0]]['parent_host'] | default('none')
            - coredns_pods is defined
      tags: verify_coredns
    
    # Phase 7: Test DNS resolution
    - name: Test DNS resolution
      block:
        # Test DNS resolution for thinkube.com domain
        - name: Test DNS resolution for thinkube.com domain
          ansible.builtin.command: >
            lxc exec {{ groups['microk8s_control_plane'][0] }} -- microk8s kubectl run -it --rm --restart=Never --image=busybox:1.28 dns-test -- nslookup -timeout=10 thinkube.com
          register: dns_test
          failed_when: false
          when: 
            - "'microk8s_control_plane' in groups"
            - groups['microk8s_control_plane'] | length > 0
            - inventory_hostname == hostvars[groups['microk8s_control_plane'][0]]['parent_host'] | default('none')
          become: true
          
        # Display DNS test results
        - name: Display DNS test results
          ansible.builtin.debug:
            msg: |
              ════════════════════════════════════════════════════════════════════════
              DNS RESOLUTION TEST
              ════════════════════════════════════════════════════════════════════════
              
              Test: nslookup thinkube.com
              
              {{ dns_test.stdout_lines | join('\n') }}
              
              ════════════════════════════════════════════════════════════════════════
          when: 
            - "'microk8s_control_plane' in groups"
            - groups['microk8s_control_plane'] | length > 0
            - inventory_hostname == hostvars[groups['microk8s_control_plane'][0]]['parent_host'] | default('none')
            - dns_test is defined
      tags: test_dns
    
    # Phase 8: Clean up temporary files
    - name: Clean up temporary files
      block:
        # Clean up temporary files on host
        - name: Clean up temporary files on host
          ansible.builtin.file:
            path: "/tmp/coredns_configmap.yaml"
            state: absent
          when: 
            - "'microk8s_control_plane' in groups"
            - groups['microk8s_control_plane'] | length > 0
            - inventory_hostname == hostvars[groups['microk8s_control_plane'][0]]['parent_host'] | default('none')
          
        # Clean up temporary files on control plane VM
        - name: Clean up temporary files on control plane VM
          ansible.builtin.command: >
            lxc exec {{ groups['microk8s_control_plane'][0] }} -- rm -f /tmp/coredns_configmap.yaml
          when: 
            - "'microk8s_control_plane' in groups"
            - groups['microk8s_control_plane'] | length > 0
            - inventory_hostname == hostvars[groups['microk8s_control_plane'][0]]['parent_host'] | default('none')
          become: true
      tags: cleanup
    
    # Phase 9: Display completion message
    - name: Display CoreDNS configuration completion message
      ansible.builtin.debug:
        msg: |
          ════════════════════════════════════════════════════════════════════════
          ✅ CoreDNS Configuration Completed
          ════════════════════════════════════════════════════════════════════════
          
          CoreDNS has been configured to forward *.thinkube.com and *.kn.thinkube.com
          domain queries to the DNS server at {{ dns_server_ip }}.
          
          NEXT STEPS:
            Run the ingress setup playbook:
            ansible-playbook -i inventory/inventory.yaml ansible/vm_deployment/70_setup_ingress.yaml
          
          ════════════════════════════════════════════════════════════════════════
      run_once: true