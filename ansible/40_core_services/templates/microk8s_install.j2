#!/bin/bash
# MicroK8s installation script for VMs
# This script installs and configures MicroK8s on Ubuntu 24.04 VMs

# Exit on any error
set -e

# Function to log with timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "Starting MicroK8s installation for {{ inventory_hostname }}"

# Ensure snapd is running and ready
log "Ensuring snapd is running..."
systemctl enable snapd.socket
systemctl enable snapd.service
systemctl start snapd.socket
systemctl start snapd.service

# Wait for snapd to be ready (crucial)
log "Waiting for snapd to be ready..."
for i in $(seq 1 30); do
    if snap list >/dev/null 2>&1; then
        log "Snapd is ready"
        break
    fi
    
    if [ $i -eq 30 ]; then
        log "ERROR: Snapd failed to initialize in time"
        exit 1
    fi
    
    log "Waiting for snapd... ($i/30)"
    sleep 5
done

# Install MicroK8s
log "Installing MicroK8s ({{ microk8s_channel }})..."
snap install microk8s --classic --channel={{ microk8s_channel }}

# Verify MicroK8s installation
if ! command -v microk8s >/dev/null 2>&1; then
    log "ERROR: MicroK8s installation failed"
    exit 1
fi

# Wait for MicroK8s to initialize
log "Waiting for MicroK8s to initialize..."
for i in $(seq 1 30); do
    if microk8s status --wait-ready; then
        log "MicroK8s is ready"
        break
    fi
    
    if [ $i -eq 30 ]; then
        log "WARNING: MicroK8s initialization timed out. Will continue anyway."
    fi
    
    log "Waiting for MicroK8s... ($i/30)"
    sleep 10
done

# Add user to microk8s group
log "Adding user '{{ admin_username }}' to microk8s group..."
usermod -aG microk8s {{ admin_username }}

# Create .kube directory for user
log "Setting up Kubernetes configuration..."
mkdir -p /home/{{ admin_username }}/.kube
microk8s config > /home/{{ admin_username }}/.kube/config
chown -R {{ admin_username }}:{{ admin_username }} /home/{{ admin_username }}/.kube

{% if is_control_node %}
# Enable core addons for control node
log "Enabling core MicroK8s addons..."

# Enable DNS addon
log "Enabling DNS addon..."
microk8s enable dns

# Enable storage addon
log "Enabling storage addon..."
microk8s enable storage

# Enable ingress addon
log "Enabling ingress addon..."
microk8s enable ingress

# Enable MetalLB addon
log "Enabling MetalLB addon..."
microk8s enable metallb:{{ metallb_range }}
{% endif %}

# Display MicroK8s status
log "MicroK8s installation complete, displaying status:"
microk8s status

# Get node information
log "Node information:"
microk8s kubectl get nodes

log "MicroK8s setup completed successfully for {{ inventory_hostname }}"
exit 0