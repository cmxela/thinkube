---
# ansible/40_thinkube/core/gitea/10_deploy.yaml
# Description:
#   Deploy Gitea Git service with Keycloak authentication
#   Provides local Git repository hosting for deployment configurations
#
# Requirements:
#   - MicroK8s cluster must be running
#   - PostgreSQL must be deployed (CORE-002)
#   - Keycloak must be deployed (CORE-006)
#   - Ingress controller must be configured
#   - Environment variable: ADMIN_PASSWORD
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/core/gitea/10_deploy.yaml
#
# Variables from inventory:
#   - domain_name: Domain for services (e.g., thinkube.com)
#   - admin_username: Admin username (default: tkadmin)
#   - admin_password: From ADMIN_PASSWORD environment variable
#   - kubeconfig: Path to kubeconfig file
#
# Dependencies:
#   - CORE-002: PostgreSQL must be deployed
#   - CORE-004: TLS certificates must be configured
#   - CORE-006: Keycloak must be deployed
#   - CORE-009: Ingress must be configured
#
# 🤖 [AI-assisted]

- name: Deploy Gitea Git Service
  hosts: microk8s_control_plane
  gather_facts: true
  
  vars:
    # Namespace and basic configuration
    gitea_namespace: "gitea"
    gitea_release_name: "gitea"
    
    # Service configuration
    gitea_subdomain: "git"
    gitea_host: "{{ gitea_subdomain }}.{{ domain_name }}"
    
    # Resource limits
    gitea_memory_limit: "512Mi"
    gitea_memory_request: "256Mi"
    gitea_cpu_limit: "1000m"
    gitea_cpu_request: "100m"
    
    # Storage configuration
    gitea_storage_size: "10Gi"
    gitea_storage_class: "microk8s-hostpath"
    
    # PostgreSQL configuration
    postgres_host: "postgresql.postgresql.svc.cluster.local"
    postgres_port: "5432"
    gitea_db_name: "gitea"
    gitea_db_user: "gitea"
    
    # Keycloak configuration
    keycloak_realm: "thinkube"
    keycloak_client_id: "gitea"
    keycloak_issuer_url: "https://auth.{{ domain_name }}/realms/{{ keycloak_realm }}"
    
    # Admin configuration
    gitea_admin_username: "{{ admin_username }}"
    gitea_admin_email: "{{ gitea_admin_username }}@{{ domain_name }}"
    
  pre_tasks:
    - name: Verify required variables
      ansible.builtin.fail:
        msg: "{{ item }} is not defined. Please set it in inventory."
      when: vars[item] is not defined or vars[item] == ""
      loop:
        - domain_name
        - admin_username
        - kubeconfig
    
    - name: Check admin password
      ansible.builtin.fail:
        msg: "ADMIN_PASSWORD environment variable must be set"
      when: lookup('env', 'ADMIN_PASSWORD') == ""
    
    - name: Set admin password from environment
      ansible.builtin.set_fact:
        admin_password: "{{ lookup('env', 'ADMIN_PASSWORD') }}"
  
  tasks:
    - name: Create Gitea namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ gitea_namespace }}"
    
    # Database setup
    - name: Generate secure database password
      ansible.builtin.set_fact:
        gitea_db_password: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
    
    - name: Create database secret
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: gitea-db-secret
            namespace: "{{ gitea_namespace }}"
          type: Opaque
          stringData:
            database: "{{ gitea_db_name }}"
            username: "{{ gitea_db_user }}"
            password: "{{ gitea_db_password }}"
    
    - name: Create PostgreSQL database for Gitea
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: "gitea-db-setup-{{ ansible_date_time.epoch }}"
            namespace: postgresql
          spec:
            ttlSecondsAfterFinished: 300
            template:
              spec:
                restartPolicy: Never
                containers:
                - name: create-db
                  image: postgres:14
                  env:
                  - name: PGPASSWORD
                    value: "{{ admin_password }}"
                  command:
                  - /bin/bash
                  - -c
                  - |
                    # Create user if not exists
                    psql -h {{ postgres_host }} -U postgres -tc "SELECT 1 FROM pg_user WHERE usename = '{{ gitea_db_user }}'" | grep -q 1 || \
                    psql -h {{ postgres_host }} -U postgres -c "CREATE USER {{ gitea_db_user }} WITH PASSWORD '{{ gitea_db_password }}';"
                    
                    # Create database if not exists
                    psql -h {{ postgres_host }} -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = '{{ gitea_db_name }}'" | grep -q 1 || \
                    psql -h {{ postgres_host }} -U postgres -c "CREATE DATABASE {{ gitea_db_name }} OWNER {{ gitea_db_user }};"
                    
                    # Grant privileges
                    psql -h {{ postgres_host }} -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE {{ gitea_db_name }} TO {{ gitea_db_user }};"
    
    - name: Wait for database setup to complete
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: batch/v1
        kind: Job
        namespace: postgresql
        label_selectors:
          - "job-name=gitea-db-setup-{{ ansible_date_time.epoch }}"
      register: job_status
      until: job_status.resources[0].status.succeeded is defined and job_status.resources[0].status.succeeded == 1
      retries: 30
      delay: 10
    
    # TLS Certificate
    - name: Get wildcard certificate from default namespace
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Secret
        namespace: default
        name: thinkube-com-tls
      register: wildcard_cert
      failed_when: wildcard_cert.resources | length == 0
    
    - name: Copy wildcard certificate to Gitea namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: gitea-tls-secret
            namespace: "{{ gitea_namespace }}"
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ wildcard_cert.resources[0].data['tls.crt'] }}"
            tls.key: "{{ wildcard_cert.resources[0].data['tls.key'] }}"
    
    # Keycloak client setup
    - name: Set up Keycloak client for Gitea
      ansible.builtin.include_role:
        name: keycloak/keycloak_client
      vars:
        keycloak_admin_username: "{{ admin_username }}"
        keycloak_admin_password: "{{ admin_password }}"
        keycloak_client_id: "{{ keycloak_client_id }}"
        keycloak_client_body:
          clientId: "{{ keycloak_client_id }}"
          enabled: true
          rootUrl: "https://{{ gitea_host }}"
          baseUrl: "https://{{ gitea_host }}"
          redirectUris:
            - "https://{{ gitea_host }}/*"
          webOrigins:
            - "https://{{ gitea_host }}"
          directAccessGrantsEnabled: false
          standardFlowEnabled: true
          implicitFlowEnabled: false
          publicClient: false
          protocol: "openid-connect"
    
    - name: Create Keycloak client secret in Kubernetes
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: gitea-oauth-secret
            namespace: "{{ gitea_namespace }}"
          type: Opaque
          stringData:
            client_id: "{{ keycloak_client_id }}"
            client_secret: "{{ keycloak_client_secret }}"
      when: keycloak_client_secret is defined
    
    # Gitea configuration
    - name: Create Gitea configuration
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: gitea-config
            namespace: "{{ gitea_namespace }}"
          data:
            app.ini: |
              APP_NAME = Thinkube Git Service
              RUN_MODE = prod
              
              [server]
              DOMAIN = {{ gitea_host }}
              ROOT_URL = https://{{ gitea_host }}/
              DISABLE_SSH = false
              SSH_DOMAIN = {{ gitea_host }}
              SSH_PORT = 22
              SSH_LISTEN_PORT = 2222
              LFS_START_SERVER = true
              OFFLINE_MODE = false
              
              [database]
              DB_TYPE = postgres
              HOST = {{ postgres_host }}:{{ postgres_port }}
              NAME = {{ gitea_db_name }}
              USER = {{ gitea_db_user }}
              PASSWD = {{ gitea_db_password }}
              SSL_MODE = disable
              
              [service]
              DISABLE_REGISTRATION = true
              REQUIRE_SIGNIN_VIEW = true
              REGISTER_EMAIL_CONFIRM = false
              ENABLE_NOTIFY_MAIL = false
              ALLOW_ONLY_EXTERNAL_REGISTRATION = true
              ENABLE_CAPTCHA = false
              DEFAULT_KEEP_EMAIL_PRIVATE = true
              DEFAULT_ALLOW_CREATE_ORGANIZATION = true
              DEFAULT_ENABLE_TIMETRACKING = true
              
              [oauth2]
              ENABLE = true
              
              [openid]
              ENABLE_OPENID_SIGNIN = false
              ENABLE_OPENID_SIGNUP = false
              
              [picture]
              DISABLE_GRAVATAR = true
              ENABLE_FEDERATED_AVATAR = false
              
              [log]
              MODE = console
              LEVEL = Info
              
              [security]
              INSTALL_LOCK = true
              SECRET_KEY = {{ lookup('password', '/dev/null length=64 chars=ascii_letters,digits') }}
              INTERNAL_TOKEN = {{ lookup('password', '/dev/null length=105 chars=ascii_letters,digits') }}
              
              [oauth2_client]
              REGISTER_EMAIL_CONFIRM = false
              OPENID_CONNECT_SCOPES = openid profile email
              ENABLE_AUTO_REGISTRATION = true
              USERNAME = preferred_username
              ACCOUNT_LINKING = auto
    
    # Deployment
    - name: Deploy Gitea
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: gitea
            namespace: "{{ gitea_namespace }}"
            labels:
              app: gitea
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: gitea
            template:
              metadata:
                labels:
                  app: gitea
              spec:
                initContainers:
                - name: init-directories
                  image: busybox:latest
                  command: ['sh', '-c', 'mkdir -p /data/git /data/gitea && chown -R 1000:1000 /data']
                  volumeMounts:
                  - name: data
                    mountPath: /data
                - name: configure-oauth
                  image: gitea/gitea:1.21
                  command:
                  - /bin/bash
                  - -c
                  - |
                    # Wait for Gitea to be ready
                    until gitea admin auth list; do
                      echo "Waiting for Gitea to initialize..."
                      sleep 5
                    done
                    
                    # Check if OAuth provider already exists
                    if ! gitea admin auth list | grep -q "Keycloak"; then
                      gitea admin auth add-oauth \
                        --name "Keycloak" \
                        --provider "openidConnect" \
                        --key "$CLIENT_ID" \
                        --secret "$CLIENT_SECRET" \
                        --auto-discover-url "{{ keycloak_issuer_url }}/.well-known/openid-configuration" \
                        --skip-local-2fa
                    fi
                  env:
                  - name: CLIENT_ID
                    valueFrom:
                      secretKeyRef:
                        name: gitea-oauth-secret
                        key: client_id
                  - name: CLIENT_SECRET
                    valueFrom:
                      secretKeyRef:
                        name: gitea-oauth-secret
                        key: client_secret
                  - name: GITEA_WORK_DIR
                    value: /data
                  volumeMounts:
                  - name: data
                    mountPath: /data
                  - name: config
                    mountPath: /data/gitea/conf
                containers:
                - name: gitea
                  image: gitea/gitea:1.21
                  ports:
                  - name: http
                    containerPort: 3000
                  - name: ssh
                    containerPort: 2222
                  env:
                  - name: USER_UID
                    value: "1000"
                  - name: USER_GID
                    value: "1000"
                  - name: GITEA_WORK_DIR
                    value: /data
                  - name: GITEA__database__PASSWD
                    valueFrom:
                      secretKeyRef:
                        name: gitea-db-secret
                        key: password
                  resources:
                    requests:
                      cpu: "{{ gitea_cpu_request }}"
                      memory: "{{ gitea_memory_request }}"
                    limits:
                      cpu: "{{ gitea_cpu_limit }}"
                      memory: "{{ gitea_memory_limit }}"
                  volumeMounts:
                  - name: data
                    mountPath: /data
                  - name: config
                    mountPath: /data/gitea/conf
                  livenessProbe:
                    httpGet:
                      path: /
                      port: 3000
                    initialDelaySeconds: 200
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /
                      port: 3000
                    initialDelaySeconds: 5
                    periodSeconds: 5
                volumes:
                - name: data
                  persistentVolumeClaim:
                    claimName: gitea-pvc
                - name: config
                  configMap:
                    name: gitea-config
    
    - name: Create PVC for Gitea
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: gitea-pvc
            namespace: "{{ gitea_namespace }}"
          spec:
            accessModes:
            - ReadWriteOnce
            storageClassName: "{{ gitea_storage_class }}"
            resources:
              requests:
                storage: "{{ gitea_storage_size }}"
    
    - name: Create Gitea service
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: gitea
            namespace: "{{ gitea_namespace }}"
          spec:
            type: ClusterIP
            selector:
              app: gitea
            ports:
            - name: http
              port: 3000
              targetPort: 3000
            - name: ssh
              port: 22
              targetPort: 2222
    
    - name: Create Gitea ingress
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: gitea
            namespace: "{{ gitea_namespace }}"
            annotations:
              cert-manager.io/cluster-issuer: letsencrypt-prod
              nginx.ingress.kubernetes.io/proxy-body-size: "0"
              nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
              nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
          spec:
            ingressClassName: nginx
            tls:
            - hosts:
              - "{{ gitea_host }}"
              secretName: gitea-tls-secret
            rules:
            - host: "{{ gitea_host }}"
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: gitea
                      port:
                        number: 3000
    
    - name: Wait for Gitea to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: apps/v1
        kind: Deployment
        namespace: "{{ gitea_namespace }}"
        name: gitea
      register: deployment
      until: deployment.resources[0].status.readyReplicas is defined and deployment.resources[0].status.readyReplicas == 1
      retries: 60
      delay: 10
    
    - name: Display deployment summary
      ansible.builtin.debug:
        msg: |
          
          ════════════════════════════════════════════════════════
          ✅ Gitea Deployment Completed
          ════════════════════════════════════════════════════════
          
          Service URL: https://{{ gitea_host }}
          Namespace: {{ gitea_namespace }}
          
          Authentication:
          - Login with Keycloak SSO
          - Users auto-created on first login
          - Admin: {{ gitea_admin_username }}
          
          Features:
          - Git repository hosting
          - Web UI for repository management
          - Webhook support for CI/CD
          - API for automation
          
          Integration:
          - Keycloak: OAuth2/OIDC authentication
          - PostgreSQL: Database backend
          - TLS: Wildcard certificate
          
          Storage: {{ gitea_storage_size }} persistent volume
          
          Next steps:
          1. Login via Keycloak SSO
          2. Create organizations for projects
          3. Configure webhooks for ArgoCD
          
          ════════════════════════════════════════════════════════