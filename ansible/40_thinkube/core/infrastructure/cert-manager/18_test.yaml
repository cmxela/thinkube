---
# Test cert-manager installation and certificate issuance
#
# This playbook verifies that cert-manager is properly installed and configured,
# and that certificates are being issued correctly.
#
# Prerequisites:
#   - Cert-manager deployed (10_deploy.yaml)
#   - ClusterIssuers configured
#   - Certificates created
#
# Usage:
#   ansible-playbook -i inventory/inventory.yaml ansible/40_thinkube/core/infrastructure/cert-manager/18_test.yaml

- name: Test cert-manager installation
  hosts: microk8s_control_plane
  gather_facts: true

  vars:
    cert_manager_namespace: "cert-manager"

  tasks:
    - name: Check cert-manager addon status
      ansible.builtin.command: microk8s status --addon cert-manager
      register: addon_status
      changed_when: false
      become: true
      failed_when: "'enabled' not in addon_status.stdout"

    - name: Check cert-manager namespace exists
      ansible.builtin.command: microk8s kubectl get namespace cert-manager
      register: namespace_check
      changed_when: false
      become: true
      failed_when: namespace_check.rc != 0

    - name: Check cert-manager pods are running
      ansible.builtin.shell: |
        microk8s kubectl get pods -n cert-manager -l app.kubernetes.io/instance=cert-manager --no-headers | wc -l
      register: pods_count
      changed_when: false
      become: true
      failed_when: pods_count.stdout | int == 0

    - name: Get cert-manager pod status
      ansible.builtin.command: microk8s kubectl get pods -n cert-manager -l app.kubernetes.io/instance=cert-manager
      register: pods_status
      changed_when: false
      become: true

    - name: Check ClusterIssuers exist
      ansible.builtin.command: microk8s kubectl get clusterissuer
      register: issuers_check
      changed_when: false
      become: true
      failed_when: issuers_check.rc != 0

    - name: Verify ClusterIssuers are ready
      ansible.builtin.shell: |
        microk8s kubectl get clusterissuer letsencrypt-prod -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}'
      register: issuer_ready
      changed_when: false
      become: true
      failed_when: issuer_ready.stdout != "True"

    - name: Check Cloudflare API token secret exists
      ansible.builtin.command: |
        microk8s kubectl get secret cloudflare-api-token -n cert-manager
      register: token_secret
      changed_when: false
      become: true
      failed_when: token_secret.rc != 0

    - name: Check certificate exists
      ansible.builtin.command: |
        microk8s kubectl get certificate {{ domain_name.replace('.', '-') }}-wildcard -n default
      register: cert_check
      changed_when: false
      become: true
      failed_when: cert_check.rc != 0

    - name: Verify certificate is ready
      ansible.builtin.shell: |
        microk8s kubectl get certificate {{ domain_name.replace('.', '-') }}-wildcard -n default -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}'
      register: cert_ready_status
      changed_when: false
      become: true
      failed_when: cert_ready_status.stdout != "True"

    - name: Check certificate secret exists
      ansible.builtin.command: |
        microk8s kubectl get secret {{ domain_name.replace('.', '-') }}-tls -n default
      register: cert_secret
      changed_when: false
      become: true
      failed_when: cert_secret.rc != 0

    - name: Verify certificate secret contains required keys
      ansible.builtin.shell: |
        microk8s kubectl get secret {{ domain_name.replace('.', '-') }}-tls -n default -o jsonpath='{.data}' | grep -q 'tls\.crt' && \
        microk8s kubectl get secret {{ domain_name.replace('.', '-') }}-tls -n default -o jsonpath='{.data}' | grep -q 'tls\.key'
      register: cert_keys
      changed_when: false
      become: true
      failed_when: cert_keys.rc != 0

    - name: Check certificate domains
      ansible.builtin.shell: |
        microk8s kubectl get certificate {{ domain_name.replace('.', '-') }}-wildcard -n default -o jsonpath='{.spec.dnsNames}' | tr -d '[]"' | tr ',' '\n'
      register: cert_domains
      changed_when: false
      become: true

    - name: Display certificate details
      ansible.builtin.command: |
        microk8s kubectl describe certificate {{ domain_name.replace('.', '-') }}-wildcard -n default
      register: cert_details
      changed_when: false
      become: true

    - name: Display test summary
      ansible.builtin.debug:
        msg:
          - "Cert-manager Status: PASS"
          - "Namespace exists: PASS"
          - "Pods running: PASS ({{ pods_count.stdout }} pods)"
          - "ClusterIssuers ready: PASS"
          - "Certificate issued: PASS"
          - "Certificate secret: PASS"
          - "Certificate domains:"
          - "{{ cert_domains.stdout_lines }}"
          - ""
          - "Certificate Details:"
          - "{{ cert_details.stdout_lines[-10:] }}"