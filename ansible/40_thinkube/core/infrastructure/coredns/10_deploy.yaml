---
# ansible/40_thinkube/core/infrastructure/coredns/10_deploy.yaml
# Description:
#   Configures CoreDNS to properly handle ingress hostnames and service resolution
#   Enables hairpin routing for ZeroTier integration and Knative domain support
#
# Requirements:
#   - MicroK8s must be installed and running
#   - ZeroTier DNS should be configured at {{ zerotier_dns_server }}
#   - Ingress controllers should be deployed with proper IPs
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/core/infrastructure/coredns/10_deploy.yaml
#
# Variables from inventory:
#   - domain_name: Base domain for all services
#   - dns: DNS server node (ZeroTier IP used as DNS server)
#   - zerotier_subnet_prefix: Prefix for ZeroTier network
#   - secondary_ingress_ip_octet: Last octet for secondary ingress IP
#   - microk8s_workers: Group containing worker nodes
#
# Dependencies:
#   - Core infrastructure components should be deployed
#   - Ingress controllers deployed (CORE-003a)
#
# ðŸ¤– [AI-assisted]

- name: Configure CoreDNS for Ingress Hairpin Routing and Service Resolution
  hosts: microk8s_control_plane
  gather_facts: true
  become: true
  vars:
    system_ca_path: /etc/ssl/certs/ca-certificates.crt
    cert_namespace: kube-system
    cert_dir: /var/snap/microk8s/current/certs
    ca_cert: "{{ cert_dir }}/ca.crt"
    ca_key: "{{ cert_dir }}/ca.key"
    kubeconfig: /var/snap/microk8s/current/credentials/client.config
    kubectl_bin: microk8s kubectl
    knative_enabled: false  # Explicitly set to false for CoreDNS setup
    zerotier_dns_server: "{{ hostvars['dns'].zerotier_ip }}"  # Get ZeroTier IP from dns host
    kn_subdomain: "kn"  # Extract from dns_search_domains
    secondary_ingress_ip: "{{ zerotier_subnet_prefix }}{{ secondary_ingress_ip_octet }}"

  pre_tasks:
    - name: Verify required variables are defined
      ansible.builtin.assert:
        that:
          - domain_name is defined
          - hostvars['dns'].zerotier_ip is defined
          - zerotier_subnet_prefix is defined
          - secondary_ingress_ip_octet is defined
          - groups['microk8s_workers'] is defined
        fail_msg: "Required inventory variables are not defined"

  tasks:
    # Detect current Kourier service IPs if installed
    - name: Check if Kourier services exist
      ansible.builtin.command: >
        {{ kubectl_bin }} get svc -n kourier-system kourier --no-headers
      register: kourier_exists
      changed_when: false
      failed_when: false
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    - name: Get current Kourier service IP
      ansible.builtin.command: >
        {{ kubectl_bin }} get svc kourier -n kourier-system -o jsonpath='{.spec.clusterIP}'
      register: kourier_svc_ip
      changed_when: false
      when: kourier_exists.rc == 0
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    - name: Get current Kourier internal service IP
      ansible.builtin.command: >
        {{ kubectl_bin }} get svc kourier-internal -n kourier-system -o jsonpath='{.spec.clusterIP}'
      register: kourier_internal_svc_ip
      changed_when: false
      when: kourier_exists.rc == 0
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    - name: Set dynamic Kourier IPs
      ansible.builtin.set_fact:
        kourier_ip: "{{ kourier_svc_ip.stdout | default('') }}"
        kourier_internal_ip: "{{ kourier_internal_svc_ip.stdout | default('') }}"
      when: kourier_exists.rc == 0

    # Create CoreDNS configuration
    - name: Create temporary CoreDNS Corefile content
      ansible.builtin.template:
        src: "templates/Corefile.j2"
        dest: "{{ ansible_user_dir }}/coredns-corefile-content.txt"
        mode: '0644'
      register: coredns_content_file

    - name: Create CoreDNS ConfigMap YAML
      ansible.builtin.shell: |
        cat > {{ ansible_user_dir }}/coredns-config.yaml <<EOF
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: coredns
          namespace: kube-system
        data:
          Corefile: |
        $(cat {{ ansible_user_dir }}/coredns-corefile-content.txt | sed 's/^/        /')
        EOF
      register: create_configmap_yaml
      changed_when: true

    - name: Update CoreDNS ConfigMap using kubectl
      ansible.builtin.command: >
        {{ kubectl_bin }} apply --validate=false -f {{ ansible_user_dir }}/coredns-config.yaml
      register: coredns_update
      changed_when: '"configmap/coredns configured" in coredns_update.stdout or "configmap/coredns created" in coredns_update.stdout'
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    - name: Restart CoreDNS pods
      ansible.builtin.command: >
        {{ kubectl_bin }} -n kube-system delete pods -l k8s-app=kube-dns
      when: coredns_update.changed
      register: restart_dns
      changed_when: restart_dns.rc == 0
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    - name: Wait for CoreDNS pods to be ready
      ansible.builtin.command: >
        {{ kubectl_bin }} -n kube-system wait --for=condition=Ready pod -l k8s-app=kube-dns --timeout=300s
      when: coredns_update.changed
      changed_when: false
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    # Configure system certificates
    - name: Ensure ca-certificates package is installed
      ansible.builtin.apt:
        name: ca-certificates
        state: present

    - name: Update system CA certificates
      ansible.builtin.command: update-ca-certificates
      register: ca_update
      changed_when: ca_update.rc == 0

    - name: Create ConfigMap with system certificates
      ansible.builtin.shell: |
        {{ kubectl_bin }} create configmap system-certificates \
        --from-file=ca-certificates.crt={{ system_ca_path }} \
        -n {{ cert_namespace }} --dry-run=client -o yaml | \
        {{ kubectl_bin }} apply -f -
      register: cert_config
      changed_when: cert_config.rc == 0
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    # Configure worker nodes to use ZeroTier DNS
    - name: Configure worker nodes to use ZeroTier DNS for domain
      block:
        - name: Create systemd-resolved conf directory
          ansible.builtin.file:
            path: /etc/systemd/resolved.conf.d
            state: directory
            mode: '0755'
          delegate_to: "{{ item }}"
          loop: "{{ groups['microk8s_workers'] }}"

        - name: Configure systemd-resolved to forward domain to ZeroTier DNS
          ansible.builtin.copy:
            dest: /etc/systemd/resolved.conf.d/zerotier.conf
            content: |
              [Resolve]
              DNS={{ zerotier_dns_server }}
              Domains=~{{ domain_name }}
            mode: '0644'
          delegate_to: "{{ item }}"
          loop: "{{ groups['microk8s_workers'] }}"
          register: resolved_config

        - name: Restart systemd-resolved service
          ansible.builtin.systemd:
            name: systemd-resolved
            state: restarted
          delegate_to: "{{ item }}"
          loop: "{{ groups['microk8s_workers'] }}"
          when: resolved_config.changed

    - name: Restart CoreDNS to apply final configuration
      ansible.builtin.shell: |
        {{ kubectl_bin }} delete pods -n kube-system -l k8s-app=kube-dns
        {{ kubectl_bin }} wait --for=condition=Ready pods -l k8s-app=kube-dns -n kube-system --timeout=60s
      when: coredns_update.changed
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    - name: Display summary message
      ansible.builtin.debug:
        msg: |
          CoreDNS configuration has been updated for:
          1. Ingress controller hairpin routing (ZeroTier integration)
          2. Kubernetes internal service resolution
          3. Knative service domains ({{ kn_subdomain }}.{{ domain_name }})

          This configuration:
          - Prioritizes the kubernetes plugin for *.cluster.local domains
          - Forwards *.{{ domain_name }} domains to ZeroTier DNS
          - Routes Knative domains to the secondary ingress IP
          - Configures worker nodes to use ZeroTier DNS for domain resolution

          DNS configuration is now ready for all services.