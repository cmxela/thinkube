---
# Deploy Ingress Controllers
#
# This playbook disables the MicroK8s builtâ€‘in ingress addon and deploys two separate ingress
# controllers via Helm:
#
#     1. Primary Ingress Controller (for general services)
#        - Namespace: ingress
#        - Release Name: primary-ingress
#        - IngressClass: "nginx" (set as default)
#        - The controller is deployed as a Deployment whose service name is expected to be:
#          primary-ingress-ingress-nginx-controller
#
#     2. Secondary Ingress Controller (for specialized workloads)
#        - Namespace: ingress-kn
#        - Release Name: secondary-ingress
#        - IngressClass: "nginx-kn"
#
# Requirements:
#   - MicroK8s is installed on the target host.
#   - MetalLB is configured for the appropriate IP range.
#   - The kubernetes.core collection is installed.
#   - cert-manager must be deployed first (CORE-003a)
#
# This playbook also creates certificates in the ingress namespaces after the controllers
# are deployed, to ensure that the namespaces exist before certificates are created.
#
# Usage:
#   Run from ansible root directory:
#   ansible-playbook -i inventory/inventory.yaml ansible/40_thinkube/core/infrastructure/ingress/10_deploy.yaml

- name: Disable MicroK8s Ingress Addon and Deploy Primary Ingress Controller
  hosts: microk8s_control_plane
  become: true
  vars:
    primary_release: "primary-ingress"
    primary_controller_class: "k8s.io/primary-ingress-nginx"
    ingress_tcp_configmap_name: "nginx-ingress-tcp-microk8s-conf"
    # Build the required variables from inventory
    metallb_ip_range: "{{ zerotier_subnet_prefix }}{{ metallb_ip_start_octet }}-{{ zerotier_subnet_prefix }}{{ metallb_ip_end_octet }}"
    primary_ingress_ip: "{{ zerotier_subnet_prefix }}{{ primary_ingress_ip_octet }}"
    kubeconfig: "/var/snap/microk8s/current/credentials/client.config"
    kubectl_bin: "/snap/bin/microk8s.kubectl"
    helm_bin: "/snap/bin/microk8s.helm3"
    # Remove TLS pre-task as cert-manager will handle certificates

  pre_tasks:
    - name: Add ingress-nginx Helm repository
      ansible.builtin.command: "{{ helm_bin }} repo add ingress-nginx https://kubernetes.github.io/ingress-nginx --force-update"
      ignore_errors: yes

    - name: Update Helm repositories
      ansible.builtin.command: "{{ helm_bin }} repo update"

  tasks:
    - name: Debug Python interpreter path
      ansible.builtin.debug:
        msg:
          - "ansible_python_interpreter: {{ ansible_python_interpreter }}"
          - "Test kubernetes import:"
      
    - name: Test kubernetes module import
      ansible.builtin.command: "{{ ansible_python_interpreter }} -c 'import kubernetes; print(kubernetes.__version__)'"
      register: k8s_test
      
    - name: Show kubernetes module version
      ansible.builtin.debug:
        var: k8s_test.stdout
        
    - name: Disable MicroK8s ingress addon (if enabled)
      ansible.builtin.command: microk8s disable ingress
      ignore_errors: yes

    - name: Enable MetalLB if not enabled
      ansible.builtin.command: "microk8s enable metallb:{{ metallb_ip_range }}"
      register: metallb_enable
      changed_when: metallb_enable.rc == 0

    - name: Create primary ingress namespace if not exists
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        validate_certs: false
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ ingress_namespace }}"

    - name: Deploy Primary Ingress Controller via Helm
      kubernetes.core.helm:
        state: present
        binary_path: "{{ helm_bin }}"
        name: "{{ primary_release }}"
        chart_ref: ingress-nginx/ingress-nginx
        release_namespace: "{{ ingress_namespace }}"
        create_namespace: false
        wait: true
        values:
          controller:
            electionID: "primary-ingress-ingress-nginx-leader"
            ingressClass: "{{ primary_ingress_class }}"
            ingressClassResource:
              name: "{{ primary_ingress_class }}"
              enabled: true
              default: true
              controllerValue: "{{ primary_controller_class }}"
            watchIngressWithoutClass: false
            service:
              type: LoadBalancer
              loadBalancerIP: "{{ primary_ingress_ip }}"
            publishService:
              enabled: true
              path: "{{ ingress_namespace }}/{{ primary_ingress_service }}"
            extraArgs:
              tcp-services-configmap: "{{ ingress_namespace }}/{{ ingress_tcp_configmap_name }}"
              controller-class: "{{ primary_controller_class }}"
              default-ssl-certificate: "{{ ingress_namespace }}/{{ ingress_namespace }}-tls-secret"

    - name: Get Primary Ingress Service Info
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        validate_certs: false
        api_version: v1
        kind: Service
        namespace: "{{ ingress_namespace }}"
        name: "{{ primary_ingress_service }}"
      register: svc_info

    - name: Debug Primary Ingress Service Data
      ansible.builtin.debug:
        var: svc_info

    - name: Wait for Primary Ingress Service External IP Assignment
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        validate_certs: false
        api_version: v1
        kind: Service
        namespace: "{{ ingress_namespace }}"
        name: "{{ primary_ingress_service }}"
      register: svc_info
      until: (svc_info.resources | length > 0) and
             (svc_info.resources[0].status.loadBalancer is defined) and
             (svc_info.resources[0].status.loadBalancer.ingress is defined) and
             (svc_info.resources[0].status.loadBalancer.ingress[0].ip == primary_ingress_ip)
      retries: 20
      delay: 3

    - name: Delete extra IngressClass 'public' (if exists) to avoid conflicts
      ansible.builtin.shell: "{{ kubectl_bin }} delete ingressclass public"
      ignore_errors: yes

    - name: Patch IngressClass '{{ primary_ingress_class }}' to be default
      ansible.builtin.shell: >
        {{ kubectl_bin }} patch ingressclass {{ primary_ingress_class }} --type=json -p='[{"op":"add","path":"/metadata/annotations","value":{"ingressclass.kubernetes.io/is-default-class":"true"}}]'
      ignore_errors: yes

    - name: Patch primary ingress controller to publish its service IP
      ansible.builtin.shell: >
        {{ kubectl_bin }} patch deployment {{ primary_ingress_service }} -n {{ ingress_namespace }} --type='json'
        -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--publish-service={{ ingress_namespace }}/{{ primary_ingress_service }}"}]'
      register: patch_primary_ds

    - name: Restart primary ingress controller pods to pick up new args
      ansible.builtin.shell: "{{ kubectl_bin }} rollout restart deployment {{ primary_ingress_service }} -n {{ ingress_namespace }}"

- name: Deploy Secondary Ingress Controller via Helm (for specialized workloads)
  hosts: microk8s_control_plane
  become: true
  vars:
    secondary_release: "secondary-ingress"
    secondary_controller_class: "k8s.io/secondary-ingress-nginx"
    secondary_ingress_ip: "{{ zerotier_subnet_prefix }}{{ secondary_ingress_ip_octet }}"
    kubeconfig: "/var/snap/microk8s/current/credentials/client.config"
    kubectl_bin: "/snap/bin/microk8s.kubectl"
    helm_bin: "/snap/bin/microk8s.helm3"
  tasks:
    - name: Create secondary ingress namespace if not exists
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        validate_certs: false
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ ingress_kn_namespace }}"

    - name: Deploy Secondary Ingress Controller via Helm
      kubernetes.core.helm:
        state: present
        binary_path: "{{ helm_bin }}"
        name: "{{ secondary_release }}"
        chart_ref: ingress-nginx/ingress-nginx
        release_namespace: "{{ ingress_kn_namespace }}"
        create_namespace: false
        wait: true
        force: true
        update_repo_cache: true
        values:
          controller:
            electionID: "secondary-ingress-ingress-nginx-leader"
            ingressClass: "{{ secondary_ingress_class }}"
            ingressClassResource:
              name: "{{ secondary_ingress_class }}"
              enabled: true
              default: false
              controllerValue: "{{ secondary_controller_class }}"
            watchIngressWithoutClass: false
            service:
              type: LoadBalancer
              loadBalancerIP: "{{ secondary_ingress_ip }}"
            publishService:
              enabled: true
              path: "{{ ingress_kn_namespace }}/{{ secondary_release }}-ingress-nginx-controller"
            extraArgs:
              controller-class: "{{ secondary_controller_class }}"
              default-ssl-certificate: "{{ ingress_kn_namespace }}/{{ ingress_kn_namespace }}-tls-secret"

    - name: Get Secondary Ingress Service Info
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        validate_certs: false
        api_version: v1
        kind: Service
        namespace: "{{ ingress_kn_namespace }}"
        name: "{{ secondary_release }}-ingress-nginx-controller"
      register: svc_info_kn

    - name: Debug Secondary Ingress Service Data
      ansible.builtin.debug:
        var: svc_info_kn

    - name: Wait for Secondary Ingress Service External IP Assignment
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        validate_certs: false
        api_version: v1
        kind: Service
        namespace: "{{ ingress_kn_namespace }}"
        name: "{{ secondary_release }}-ingress-nginx-controller"
      register: svc_info_kn
      until: (svc_info_kn.resources | length > 0) and
             (svc_info_kn.resources[0].status.loadBalancer is defined) and
             (svc_info_kn.resources[0].status.loadBalancer.ingress is defined) and
             (svc_info_kn.resources[0].status.loadBalancer.ingress[0].ip == secondary_ingress_ip)
      retries: 20
      delay: 3

    - name: Patch secondary ingress controller to publish its service IP
      ansible.builtin.shell: >
        {{ kubectl_bin }} patch deployment {{ secondary_release }}-ingress-nginx-controller -n {{ ingress_kn_namespace }} --type='json'
        -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--publish-service={{ ingress_kn_namespace }}/{{ secondary_release }}-ingress-nginx-controller"}]'
      register: patch_secondary_ds

    - name: Restart secondary ingress controller pods to pick up new args
      ansible.builtin.shell: "{{ kubectl_bin }} rollout restart deployment {{ secondary_release }}-ingress-nginx-controller -n {{ ingress_kn_namespace }}"

- name: Create and apply certificates for ingress namespaces
  hosts: microk8s_control_plane
  become: true
  vars:
    kubeconfig: "/var/snap/microk8s/current/credentials/client.config"
    kubectl_bin: "/snap/bin/microk8s.kubectl"
  tasks:
    - name: Create wildcard certificate for primary ingress namespace
      ansible.builtin.copy:
        content: |
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: {{ domain_name.replace('.', '-') }}-wildcard
            namespace: {{ ingress_namespace }}
          spec:
            secretName: {{ ingress_namespace }}-tls-secret
            issuerRef:
              name: letsencrypt-prod
              kind: ClusterIssuer
            dnsNames:
            - "{{ domain_name }}"
            - "*.{{ domain_name }}"
            - "*.kn.{{ domain_name }}"
            renewBefore: 720h  # 30 days
        dest: /tmp/certificate-ingress.yaml
      tags:
        - certificate
        
    - name: Create wildcard certificate for secondary ingress namespace
      ansible.builtin.copy:
        content: |
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: {{ domain_name.replace('.', '-') }}-wildcard
            namespace: {{ ingress_kn_namespace }}
          spec:
            secretName: {{ ingress_kn_namespace }}-tls-secret
            issuerRef:
              name: letsencrypt-prod
              kind: ClusterIssuer
            dnsNames:
            - "{{ domain_name }}"
            - "*.{{ domain_name }}"
            - "*.kn.{{ domain_name }}"
            renewBefore: 720h  # 30 days
        dest: /tmp/certificate-ingress-kn.yaml
      tags:
        - certificate
        
    - name: Apply primary ingress certificate
      ansible.builtin.command: "{{ kubectl_bin }} apply -f /tmp/certificate-ingress.yaml"
      register: cert_result_ingress
      tags:
        - certificate
        
    - name: Apply secondary ingress certificate
      ansible.builtin.command: "{{ kubectl_bin }} apply -f /tmp/certificate-ingress-kn.yaml"
      register: cert_result_ingress_kn
      tags:
        - certificate
        
    - name: Display certificate status
      ansible.builtin.debug:
        msg:
          - "Certificates deployed successfully to ingress namespaces"
          - "Primary ingress certificate: {{ cert_result_ingress.stdout }}"
          - "Secondary ingress certificate: {{ cert_result_ingress_kn.stdout }}"
      tags:
        - info