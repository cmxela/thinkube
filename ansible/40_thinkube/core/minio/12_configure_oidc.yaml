---
# ansible/40_thinkube/core/minio/12_configure_oidc.yaml
# Description:
#   Configure MinIO OIDC integration with Keycloak with persistent authentication
#   
#   This playbook configures MinIO to use Keycloak as its identity provider via OIDC.
#   It specifically sets up:
#   1. MinIO Client (mc) installation
#   2. OIDC configuration with offline_access for persistent sessions
#   3. Policy claim mapping for authorization
#   4. Proper service restart to apply changes
#
# Requirements:
#   - Kubernetes cluster with MicroK8s
#   - MinIO deployed and running (run 10_deploy.yaml first)
#   - Keycloak client configured for MinIO (run 11_configure_keycloak.yaml first)
#   - ADMIN_PASSWORD environment variable set
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/core/minio/12_configure_oidc.yaml
#
# Variables from inventory:
#   - keycloak_url: URL to Keycloak instance
#   - keycloak_realm: Keycloak realm name
#   - admin_username: Administrator username
#   - minio_api_hostname, minio_console_hostname: Service hostnames
#
# Dependencies:
#   - CORE-001: MicroK8s Control Node
#   - CORE-004: Keycloak
#   - CORE-006: MinIO (base deployment)

- name: Configure OIDC in MinIO via `mc`
  hosts: microk8s_control_plane
  gather_facts: true

  vars:
    ###################################################################
    # MinIO Access + Host
    ###################################################################
    minio_endpoint: "https://{{ minio_api_hostname }}"
    minio_alias: "minio"
    minio_root_user: "{{ admin_username }}"
    minio_root_password: "{{ lookup('env', 'ADMIN_PASSWORD') }}"

    ###################################################################
    # Keycloak Client Info
    ###################################################################
    keycloak_client_id: "minio"
    keycloak_config_url: "{{ keycloak_url }}/realms/{{ keycloak_realm }}/.well-known/openid-configuration"
    keycloak_admin_url: "{{ keycloak_url }}/admin"
    keycloak_idp_name: "keycloak"
    keycloak_display_name: "KEYCLOAK SSO"
    # Include openid and offline_access scopes for long-lived sessions
    # offline_access is essential for persistent authentication beyond browser sessions
    keycloak_scopes: "openid offline_access"

    ###################################################################
    # MC path
    ###################################################################
    mc_path: "/usr/local/bin/mc"

    ###################################################################
    # Keycloak connection info
    ###################################################################
    keycloak_admin_password: "{{ lookup('env', 'ADMIN_PASSWORD') }}"

  tasks:
    ###################################################################
    # 0) Get admin token and client secret
    ###################################################################
    - name: Get Keycloak admin token
      ansible.builtin.uri:
        url: "{{ keycloak_url }}/realms/master/protocol/openid-connect/token"
        method: POST
        body_format: form-urlencoded
        body:
          client_id: "admin-cli"
          username: "{{ admin_username }}"
          password: "{{ keycloak_admin_password }}"
          grant_type: "password"
        validate_certs: true
        status_code: 200
      register: keycloak_token

    - name: GET "minio" client
      ansible.builtin.uri:
        url: "{{ keycloak_url }}/admin/realms/{{ keycloak_realm }}/clients?clientId={{ keycloak_client_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ keycloak_token.json.access_token }}"
        validate_certs: true
        status_code: 200
      register: minio_client

    - name: Fail if client not found
      ansible.builtin.fail:
        msg: "Client '{{ keycloak_client_id }}' not found in realm '{{ keycloak_realm }}'"
      when: minio_client.json | length == 0

    - name: Get client secret
      ansible.builtin.uri:
        url: "{{ keycloak_url }}/admin/realms/{{ keycloak_realm }}/clients/{{ minio_client.json[0].id }}/client-secret"
        method: GET
        headers:
          Authorization: "Bearer {{ keycloak_token.json.access_token }}"
        validate_certs: true
        status_code: 200
      register: client_secret_response

    - name: Set client secret fact
      ansible.builtin.set_fact:
        keycloak_client_secret: "{{ client_secret_response.json.value }}"
    
    ###################################################################
    # 1) Install mc (MinIO Client)
    ###################################################################
    - name: Install MinIO Client (mc)
      ansible.builtin.get_url:
        url: "https://dl.min.io/client/mc/release/linux-amd64/mc"
        dest: "{{ mc_path }}"
        mode: "0755"
      become: true

    ###################################################################
    # 2) Configure OIDC via environment variables only
    ###################################################################
    # Note: We skip IDP configuration entirely and use only environment variables
    # to avoid conflicts between mc idp openid and environment variable configuration

    # Patch MinIO StatefulSet to add OIDC environment variables
    - name: Patch MinIO StatefulSet with OIDC environment variables
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        name: minio
        namespace: "{{ minio_namespace }}"
        api_version: apps/v1
        kind: StatefulSet
        merge_type: strategic-merge
        definition:
          spec:
            template:
              spec:
                containers:
                - name: minio
                  env:
                  - name: MINIO_IDENTITY_OPENID_CONFIG_URL
                    value: "{{ keycloak_config_url }}"
                  - name: MINIO_IDENTITY_OPENID_CLIENT_ID
                    value: "{{ keycloak_client_id }}"
                  - name: MINIO_IDENTITY_OPENID_CLIENT_SECRET
                    value: "{{ keycloak_client_secret }}"
                  - name: MINIO_IDENTITY_OPENID_CLAIM_NAME
                    value: "policy"
                  - name: MINIO_IDENTITY_OPENID_SCOPES
                    value: "{{ keycloak_scopes }}"
                  - name: MINIO_IDENTITY_OPENID_REDIRECT_URI
                    value: "https://{{ minio_console_hostname }}/oauth_callback"
                  - name: MINIO_IDENTITY_OPENID_DISPLAY_NAME
                    value: "{{ keycloak_display_name }}"

    ###################################################################
    # 4) Restart MinIO to apply changes
    ###################################################################
    - name: Restart MinIO service via mc
      ansible.builtin.shell: >
        {{ mc_path }} --json admin service restart {{ minio_alias }}
      args:
        executable: /bin/bash
      register: restart_result
      failed_when: false

    - name: Force restart MinIO pod to ensure configuration is loaded
      ansible.builtin.shell: >
        {{ kubectl_bin }} -n {{ minio_namespace }} delete pod -l app=minio --force --grace-period=0
      args:
        executable: /bin/bash
      register: pod_restart_result

    - name: Wait for MinIO pod to be ready
      ansible.builtin.shell: >
        {{ kubectl_bin }} -n {{ minio_namespace }} wait --for=condition=ready pod -l app=minio --timeout=120s
      args:
        executable: /bin/bash
      register: wait_result

    ###################################################################
    # 5) Verify the OIDC configuration
    ###################################################################
    - name: Wait for MinIO to stabilize after restart
      ansible.builtin.pause:
        seconds: 10
      
    - name: Verify OIDC environment variables are set
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: apps/v1
        kind: StatefulSet
        name: minio
        namespace: "{{ minio_namespace }}"
      register: minio_statefulset
      
    - name: Extract OIDC environment variables
      ansible.builtin.set_fact:
        oidc_env_vars: "{{ minio_statefulset.resources[0].spec.template.spec.containers[0].env | selectattr('name', 'match', '^MINIO_IDENTITY_OPENID_') | list }}"
      
    - name: Display OIDC configuration
      ansible.builtin.debug:
        msg:
          - "OIDC Configuration via Environment Variables:"
          - "{{ oidc_env_vars | map(attribute='name') | list }}"
        
    ###################################################################
    # 6) Add verification message about token configuration
    ###################################################################
    - name: Display token configuration verification message
      ansible.builtin.debug:
        msg: |
          MinIO OIDC configuration has been completed with offline_access scope.
          The Keycloak client has been configured with:
          - Longer token lifespans (24h access tokens, 30d offline sessions)
          - Policy claim mapping in both access and refresh tokens
          - Offline access capability for persistent authentication
          
          This configuration should prevent the "Policy claim missing from JWT token" error
          that previously occurred after approximately one hour.