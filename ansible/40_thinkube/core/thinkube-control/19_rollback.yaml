---
# ansible/40_thinkube/core/thinkube-control/19_rollback.yaml
# Description:
#   Rollback Thinkube Control deployment and remove all related resources
#
# Requirements:
#   - MicroK8s cluster running
#   - kubectl configured
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/core/thinkube-control/19_rollback.yaml
#
# Variables from inventory:
#   - kubeconfig: Path to kubeconfig file
#
# 🤖 [AI-assisted]

- name: Rollback Thinkube Control Deployment
  hosts: microk8s_control_plane
  gather_facts: false

  vars:
    control_namespace: "control-hub"
    argocd_namespace: "argocd"
    argo_workflows_namespace: "argo"
    gitea_namespace: "gitea"
    gitea_hostname: "git.{{ domain_name }}"
    app_name: "control-hub"

  tasks:
    - name: Verify kubeconfig is defined
      ansible.builtin.fail:
        msg: "kubeconfig is not defined. Please set it in inventory."
      when: kubeconfig is not defined or kubeconfig == ""

    # Remove ArgoCD application
    - name: Delete Control Hub ArgoCD application
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        api_version: argoproj.io/v1alpha1
        kind: Application
        name: "{{ app_name }}"
        namespace: "{{ argocd_namespace }}"
        state: absent

    # Remove Argo Workflows
    - name: Delete all Control workflows
      ansible.builtin.shell: |
        {{ kubectl_bin }} delete workflows -n {{ argo_workflows_namespace }} -l app={{ app_name }} --ignore-not-found=true
        # Also delete by name pattern in case labels are missing
        {{ kubectl_bin }} get workflows -n {{ argo_workflows_namespace }} -o name | grep -i "control" | xargs -r {{ kubectl_bin }} delete -n {{ argo_workflows_namespace }}
      register: workflow_cleanup

    - name: Delete Control build workflow template if exists
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        api_version: argoproj.io/v1alpha1
        kind: WorkflowTemplate
        namespace: "{{ argo_workflows_namespace }}"
        state: absent
        name: "{{ app_name }}-build"

    # Remove Redis
    - name: Delete Redis resources
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        api_version: "{{ item.api_version }}"
        kind: "{{ item.kind }}"
        name: ephemeral-redis
        namespace: "{{ control_namespace }}"
        state: absent
      loop:
        - { api_version: "v1", kind: "Service" }
        - { api_version: "apps/v1", kind: "Deployment" }

    # Remove secrets
    - name: Delete Control secrets
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Secret
        namespace: "{{ control_namespace }}"
        name: "{{ item }}"
        state: absent
      loop:
        - control-tls-secret
        - github-token
        - control-hub-keycloak
        - docker-config

    # Remove service account
    - name: Delete Kaniko service account
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: ServiceAccount
        name: kaniko-builder
        namespace: "{{ control_namespace }}"
        state: absent
    
    # Remove Keycloak client
    - name: Include common Keycloak tasks to get admin token
      include_role:
        name: keycloak/keycloak_common
      vars:
        keycloak_namespace: "keycloak"
        keycloak_realm: "thinkube"
        keycloak_url: "https://auth.{{ domain_name }}"
        keycloak_admin_username: "{{ admin_username }}"
        keycloak_admin_password: "{{ lookup('env', 'ADMIN_PASSWORD') }}"
        keycloak_validate_certs: true

    - name: Get control-hub client details from Keycloak
      uri:
        url: "https://auth.{{ domain_name }}/admin/realms/thinkube/clients?clientId=control-hub"
        method: GET
        headers:
          Authorization: "Bearer {{ keycloak_token.json.access_token }}"
        validate_certs: true
        status_code: [200]
      register: control_hub_client
      when: keycloak_token is defined

    - name: Delete control-hub client from Keycloak
      uri:
        url: "https://auth.{{ domain_name }}/admin/realms/thinkube/clients/{{ control_hub_client.json[0].id }}"
        method: DELETE
        headers:
          Authorization: "Bearer {{ keycloak_token.json.access_token }}"
        validate_certs: true
        status_code: [204]
      when: 
        - keycloak_token is defined
        - control_hub_client.json is defined
        - control_hub_client.json | length > 0

    # Remove Gitea repository
    - name: Get Gitea admin token
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Secret
        namespace: "{{ gitea_namespace }}"
        name: gitea-admin-token
      register: gitea_token_secret
    
    - name: Delete Gitea repository
      uri:
        url: "https://{{ gitea_hostname }}/api/v1/repos/thinkube-deployments/{{ app_name }}-deployment"
        method: DELETE
        headers:
          Authorization: "token {{ gitea_token_secret.resources[0].data.token | b64decode }}"
        validate_certs: true
        status_code: [204, 404]
      when: 
        - gitea_token_secret.resources is defined
        - gitea_token_secret.resources | length > 0
      register: gitea_delete_result

    - name: Verify Gitea repository was deleted
      uri:
        url: "https://{{ gitea_hostname }}/api/v1/repos/thinkube-deployments/{{ app_name }}-deployment"
        method: GET
        headers:
          Authorization: "token {{ gitea_token_secret.resources[0].data.token | b64decode }}"
        validate_certs: true
        status_code: [404]
      when: 
        - gitea_token_secret.resources is defined
        - gitea_token_secret.resources | length > 0
        - gitea_delete_result is defined
    
    # Remove Gitea token from Argo namespace
    - name: Delete Gitea token from Argo namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Secret
        name: gitea-admin-token
        namespace: "{{ argo_workflows_namespace }}"
        state: absent

    # Remove namespace (this will clean up any remaining resources)
    - name: Delete Control namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Namespace
        name: "{{ control_namespace }}"
        state: absent
        wait: true
        wait_condition:
          type: Terminating
          status: "False"
        wait_timeout: 300

    # Clean up Harbor images
    - name: Check if control-backend repository exists in Harbor
      uri:
        url: "https://registry.{{ domain_name }}/api/v2.0/projects/thinkube/repositories/control-backend"
        method: GET
        user: admin
        password: "{{ lookup('env', 'ADMIN_PASSWORD') }}"
        force_basic_auth: yes
        validate_certs: true
        status_code: [200, 404]
      register: backend_repo_check

    - name: Delete control-backend images from Harbor
      uri:
        url: "https://registry.{{ domain_name }}/api/v2.0/projects/thinkube/repositories/control-backend"
        method: DELETE
        user: admin
        password: "{{ lookup('env', 'ADMIN_PASSWORD') }}"
        force_basic_auth: yes
        validate_certs: true
        status_code: [200, 202]
      register: backend_image_delete
      when: backend_repo_check.status == 200

    - name: Check if control-frontend repository exists in Harbor
      uri:
        url: "https://registry.{{ domain_name }}/api/v2.0/projects/thinkube/repositories/control-frontend"
        method: GET
        user: admin
        password: "{{ lookup('env', 'ADMIN_PASSWORD') }}"
        force_basic_auth: yes
        validate_certs: true
        status_code: [200, 404]
      register: frontend_repo_check

    - name: Delete control-frontend images from Harbor
      uri:
        url: "https://registry.{{ domain_name }}/api/v2.0/projects/thinkube/repositories/control-frontend"
        method: DELETE
        user: admin
        password: "{{ lookup('env', 'ADMIN_PASSWORD') }}"
        force_basic_auth: yes
        validate_certs: true
        status_code: [200, 202]
      register: frontend_image_delete
      when: frontend_repo_check.status == 200

    # Clean up cloned repository
    - name: Check if cloned repository exists
      ansible.builtin.stat:
        path: "/home/{{ system_username | default('thinkube') }}/shared-code/thinkube-control"
      register: repo_dir

    - name: Remove cloned repository from shared-code directory
      ansible.builtin.file:
        path: "/home/{{ system_username | default('thinkube') }}/shared-code/thinkube-control"
        state: absent
      when: repo_dir.stat.exists

    - name: Display rollback completion message
      ansible.builtin.debug:
        msg: |
          
          ════════════════════════════════════════════════════════
          ✅ Thinkube Control Rollback Completed
          ════════════════════════════════════════════════════════
          
          All Control resources have been removed:
          - ArgoCD applications deleted
          - Argo Workflows and old runs deleted
          - Redis deployment removed
          - Secrets cleaned up
          - Harbor images deleted
          - Gitea repository deleted
          - Local repository cleaned up
          - Namespace deleted
          
          ════════════════════════════════════════════════════════