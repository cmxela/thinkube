---
# Variables for MicroK8s deployment

# Network configuration
zerotier_subnet_prefix: "192.168.191."

# MetalLB IP range configuration
metallb_ip_start_octet: 200
metallb_ip_end_octet: 205
metallb_ip_range_size: 6  # From 200 to 205 inclusive (matches documentation)

# Ingress namespace configuration
ingress_namespace: "ingress"
ingress_kn_namespace: "ingress-kn"

# Primary ingress controller configuration
primary_ingress_class: "nginx"
primary_ingress_ip_octet: 200
primary_ingress_service: "primary-ingress-ingress-nginx-controller"
primary_ingress_ip: "{{ zerotier_subnet_prefix }}{{ primary_ingress_ip_octet }}"

# Secondary ingress controller configuration
secondary_ingress_class: "nginx-kn"
secondary_ingress_ip_octet: 201
secondary_ingress_service: "secondary-ingress-ingress-nginx-controller"

# Domain configuration is inherited from inventory.yaml (thinkube.com)

# SeaweedFS configuration
seaweedfs_namespace: "seaweedfs"
seaweedfs_s3_hostname: "s3.{{ domain_name }}"
seaweedfs_ui_hostname: "seaweedfs.{{ domain_name }}"

# User configuration - inherits from inventory.yaml
# admin_username: "admin" - defined in inventory.yaml
admin_first_name: "Admin"  # Application admin's first name
admin_last_name: "User"  # Application admin's last name
admin_email: "{{ admin_username }}@{{ domain_name }}"  # Admin email address

# Keycloak configuration
keycloak_hostname: "auth.{{ domain_name }}"
keycloak_url: "https://{{ keycloak_hostname }}"
keycloak_realm: "thinkube"  # Using thinkube realm for consistency
thinkube_applications_displayname: "Thinkube Applications"

# Harbor registry configuration
harbor_registry: "registry.{{ domain_name }}"
harbor_namespace: "registry"
harbor_release: "harbor"
harbor_project: "thinkube"
harbor_storage_class: "microk8s-hostpath"
harbor_registry_size: "50Gi"
harbor_database_size: "10Gi"
harbor_robot_name: "thinkube"
harbor_robot_user: "robot$thinkube"
harbor_admin_user: "admin"

# Certificate paths
ssl_cert_dir: "/etc/ssl/{{ domain_name.split('.')[0] }}_certificates"
tls_crt_path: "{{ ssl_cert_dir }}/{{ domain_name }}.fullchain.cer"
tls_key_path: "{{ ssl_cert_dir }}/{{ domain_name }}.key"

# PostgreSQL configuration
postgres_hostname: "postgres.{{ domain_name }}"
postgres_namespace: "postgres"

# MinIO configuration
minio_namespace: "minio"
minio_api_hostname: "s3.{{ domain_name }}"
minio_console_hostname: "minio.{{ domain_name }}"
minio_capacity: "50Gi"
minio_storage_class: "microk8s-hostpath"
minio_image: "{{ harbor_registry }}/library/minio:latest"

# Kubernetes configuration
kubeconfig: "/var/snap/microk8s/current/credentials/client.config"
kubectl_bin: "/snap/bin/microk8s.kubectl"
helm_bin: "/snap/bin/microk8s.helm3"

# ArgoCD configuration
argocd_namespace: "argocd"
argocd_hostname: "argocd.{{ domain_name }}"
argocd_grpc_hostname: "argocd-grpc.{{ domain_name }}"
argocd_release_name: "argocd"
argocd_chart_repo: "https://argoproj.github.io/argo-helm"
argocd_chart_name: "argo-cd"
argocd_client_id: "argocd"

# Argo Workflows configuration
argo_namespace: "argo"
argo_domain: "argo.{{ domain_name }}"
argo_grpc_domain: "grpc-argo.{{ domain_name }}"
argo_release_name: "argo-workflows"
argo_chart_repo: "https://argoproj.github.io/argo-helm"
argo_chart_name: "argo-workflows"
argo_events_release_name: "argo-events"
argo_events_chart_name: "argo-events"
argo_service_type: "ClusterIP"
argo_oidc_client_id: "argo"

# DevPi configuration
devpi_namespace: "devpi"
devpi_dashboard_hostname: "devpi.{{ domain_name }}"
devpi_api_hostname: "devpi-api.{{ domain_name }}"
devpi_index_name: "prod"

# Gitea configuration
gitea_namespace: "gitea"
gitea_subdomain: "git"
gitea_hostname: "{{ gitea_subdomain }}.{{ domain_name }}"

# GitHub organization for Thinkube
github_org: "thinkube"

# Container registry settings (for all services)
registry_subdomain: "registry"
registry_domain: "{{ registry_subdomain }}.{{ domain_name }}"