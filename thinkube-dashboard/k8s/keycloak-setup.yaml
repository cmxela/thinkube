apiVersion: v1
kind: Secret
metadata:
  name: dashboard-hub-keycloak
  namespace: dashboard-hub
type: Opaque
stringData:
  client_id: "dashboard-hub"
  client_secret: "${KEYCLOAK_CLIENT_SECRET}"  # Replace with actual secret
  realm: "kubernetes"
  auth_url: "https://keycloak.k8s.cmxela.com/realms/kubernetes/protocol/openid-connect/auth"
  token_url: "https://keycloak.k8s.cmxela.com/realms/kubernetes/protocol/openid-connect/token"
  api_url: "https://keycloak.k8s.cmxela.com/realms/kubernetes/protocol/openid-connect/userinfo"
---
# This ConfigMap contains a script that can be used to create the Keycloak client
# It's not directly executed by K8s but provides documentation for manual setup
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-client-setup
  namespace: dashboard-hub
data:
  setup-instructions.sh: |
    #!/bin/bash
    # Keycloak Client Setup Script
    # 
    # This script provides instructions for setting up the required Keycloak client
    # for the Dashboard Hub application.
    #
    # Prerequisites:
    # - A running Keycloak server
    # - The Keycloak admin CLI (kcadm.sh)
    # - Appropriate admin credentials
    
    # Log in to Keycloak
    ./kcadm.sh config credentials --server https://keycloak.k8s.cmxela.com/auth \
      --realm master --user admin --password "$KEYCLOAK_ADMIN_PASSWORD"
    
    # Create client
    ./kcadm.sh create clients -r kubernetes -s clientId=dashboard-hub \
      -s name="Dashboard Hub" \
      -s description="Dashboard Hub for platform services" \
      -s enabled=true \
      -s publicClient=false \
      -s bearerOnly=false \
      -s standardFlowEnabled=true \
      -s serviceAccountsEnabled=true \
      -s directAccessGrantsEnabled=false \
      -s implicitFlowEnabled=false \
      -s 'redirectUris=["https://dashboard.k8s.cmxela.com/*"]' \
      -s 'webOrigins=["https://dashboard.k8s.cmxela.com"]' \
      -s baseUrl="https://dashboard.k8s.cmxela.com" \
      -s rootUrl="https://dashboard.k8s.cmxela.com" \
      -o --id > client_id.txt
    
    CLIENT_ID=$(cat client_id.txt)
    
    # Generate client secret
    CLIENT_SECRET=$(./kcadm.sh create clients/$CLIENT_ID/client-secret -r kubernetes -o json | jq -r '.value')
    echo "Client Secret: $CLIENT_SECRET"
    
    # Create client roles for each service
    ./kcadm.sh create clients/$CLIENT_ID/roles -r kubernetes -s name=storage-admin \
      -s 'description=Access to storage services like MinIO'
    
    ./kcadm.sh create clients/$CLIENT_ID/roles -r kubernetes -s name=logs-viewer \
      -s 'description=Access to logging and monitoring services'
    
    ./kcadm.sh create clients/$CLIENT_ID/roles -r kubernetes -s name=registry-user \
      -s 'description=Access to container registry'
    
    ./kcadm.sh create clients/$CLIENT_ID/roles -r kubernetes -s name=ai-user \
      -s 'description=Access to AI and ML services'
    
    ./kcadm.sh create clients/$CLIENT_ID/roles -r kubernetes -s name=automation-user \
      -s 'description=Access to automation services'
    
    ./kcadm.sh create clients/$CLIENT_ID/roles -r kubernetes -s name=db-admin \
      -s 'description=Access to database management services'
    
    ./kcadm.sh create clients/$CLIENT_ID/roles -r kubernetes -s name=developer \
      -s 'description=Access to development services'
    
    ./kcadm.sh create clients/$CLIENT_ID/roles -r kubernetes -s name=data-scientist \
      -s 'description=Access to data science services'
    
    echo "=== CLIENT SETUP COMPLETE ==="
    echo "Client ID: dashboard-hub"
    echo "Client Secret: $CLIENT_SECRET"
    echo ""
    echo "You must create the following Kubernetes secret:"
    echo ""
    echo "kubectl create secret generic dashboard-hub-keycloak \\"
    echo "  --namespace dashboard-hub \\"
    echo "  --from-literal=client_id=dashboard-hub \\"
    echo "  --from-literal=client_secret=$CLIENT_SECRET \\"
    echo "  --from-literal=realm=kubernetes"